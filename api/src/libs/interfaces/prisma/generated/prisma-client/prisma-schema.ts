// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateDepartment {
  count: Int!
}

type AggregateDepartmentTranslation {
  count: Int!
}

type AggregateEmployee {
  count: Int!
}

type AggregateEmployeePosition {
  count: Int!
}

type AggregateEmployeePositionTranslation {
  count: Int!
}

type AggregateEmployeeTranslation {
  count: Int!
}

type AggregateExpert {
  count: Int!
}

type AggregateExpertTranslation {
  count: Int!
}

type AggregateJournal {
  count: Int!
}

type AggregateLanguage {
  count: Int!
}

type AggregateNews {
  count: Int!
}

type AggregateNewsTranslation {
  count: Int!
}

type AggregateOecd {
  count: Int!
}

type AggregateOecdTranslation {
  count: Int!
}

type AggregateQrj {
  count: Int!
}

type AggregateQrjJournal {
  count: Int!
}

type AggregateQrjJournalTranslation {
  count: Int!
}

type AggregateQrjPublication {
  count: Int!
}

type AggregateQrjPublicationTranslation {
  count: Int!
}

type AggregateQrjTranslation {
  count: Int!
}

type AggregateTechnologyTransferAndInnovationOrganization {
  count: Int!
}

type AggregateTechnologyTransferNetwork {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserTranslation {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Department {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  translation(where: DepartmentTranslationWhereInput, orderBy: DepartmentTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DepartmentTranslation!]
}

type DepartmentConnection {
  pageInfo: PageInfo!
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  id: ID
  translation: DepartmentTranslationCreateManyWithoutDepartmentInput
}

input DepartmentCreateOneInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateOneWithoutTranslationInput {
  create: DepartmentCreateWithoutTranslationInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateWithoutTranslationInput {
  id: ID
}

type DepartmentEdge {
  node: Department!
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DepartmentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
  AND: [DepartmentSubscriptionWhereInput!]
  OR: [DepartmentSubscriptionWhereInput!]
  NOT: [DepartmentSubscriptionWhereInput!]
}

type DepartmentTranslation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  language: Language!
  department: Department!
}

type DepartmentTranslationConnection {
  pageInfo: PageInfo!
  edges: [DepartmentTranslationEdge]!
  aggregate: AggregateDepartmentTranslation!
}

input DepartmentTranslationCreateInput {
  id: ID
  name: String!
  language: LanguageCreateOneInput!
  department: DepartmentCreateOneWithoutTranslationInput!
}

input DepartmentTranslationCreateManyWithoutDepartmentInput {
  create: [DepartmentTranslationCreateWithoutDepartmentInput!]
  connect: [DepartmentTranslationWhereUniqueInput!]
}

input DepartmentTranslationCreateWithoutDepartmentInput {
  id: ID
  name: String!
  language: LanguageCreateOneInput!
}

type DepartmentTranslationEdge {
  node: DepartmentTranslation!
  cursor: String!
}

enum DepartmentTranslationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type DepartmentTranslationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input DepartmentTranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [DepartmentTranslationScalarWhereInput!]
  OR: [DepartmentTranslationScalarWhereInput!]
  NOT: [DepartmentTranslationScalarWhereInput!]
}

type DepartmentTranslationSubscriptionPayload {
  mutation: MutationType!
  node: DepartmentTranslation
  updatedFields: [String!]
  previousValues: DepartmentTranslationPreviousValues
}

input DepartmentTranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DepartmentTranslationWhereInput
  AND: [DepartmentTranslationSubscriptionWhereInput!]
  OR: [DepartmentTranslationSubscriptionWhereInput!]
  NOT: [DepartmentTranslationSubscriptionWhereInput!]
}

input DepartmentTranslationUpdateInput {
  name: String
  language: LanguageUpdateOneRequiredInput
  department: DepartmentUpdateOneRequiredWithoutTranslationInput
}

input DepartmentTranslationUpdateManyDataInput {
  name: String
}

input DepartmentTranslationUpdateManyMutationInput {
  name: String
}

input DepartmentTranslationUpdateManyWithoutDepartmentInput {
  create: [DepartmentTranslationCreateWithoutDepartmentInput!]
  delete: [DepartmentTranslationWhereUniqueInput!]
  connect: [DepartmentTranslationWhereUniqueInput!]
  set: [DepartmentTranslationWhereUniqueInput!]
  disconnect: [DepartmentTranslationWhereUniqueInput!]
  update: [DepartmentTranslationUpdateWithWhereUniqueWithoutDepartmentInput!]
  upsert: [DepartmentTranslationUpsertWithWhereUniqueWithoutDepartmentInput!]
  deleteMany: [DepartmentTranslationScalarWhereInput!]
  updateMany: [DepartmentTranslationUpdateManyWithWhereNestedInput!]
}

input DepartmentTranslationUpdateManyWithWhereNestedInput {
  where: DepartmentTranslationScalarWhereInput!
  data: DepartmentTranslationUpdateManyDataInput!
}

input DepartmentTranslationUpdateWithoutDepartmentDataInput {
  name: String
  language: LanguageUpdateOneRequiredInput
}

input DepartmentTranslationUpdateWithWhereUniqueWithoutDepartmentInput {
  where: DepartmentTranslationWhereUniqueInput!
  data: DepartmentTranslationUpdateWithoutDepartmentDataInput!
}

input DepartmentTranslationUpsertWithWhereUniqueWithoutDepartmentInput {
  where: DepartmentTranslationWhereUniqueInput!
  update: DepartmentTranslationUpdateWithoutDepartmentDataInput!
  create: DepartmentTranslationCreateWithoutDepartmentInput!
}

input DepartmentTranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  language: LanguageWhereInput
  department: DepartmentWhereInput
  AND: [DepartmentTranslationWhereInput!]
  OR: [DepartmentTranslationWhereInput!]
  NOT: [DepartmentTranslationWhereInput!]
}

input DepartmentTranslationWhereUniqueInput {
  id: ID
  name: String
}

input DepartmentUpdateDataInput {
  translation: DepartmentTranslationUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateInput {
  translation: DepartmentTranslationUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateOneRequiredInput {
  create: DepartmentCreateInput
  update: DepartmentUpdateDataInput
  upsert: DepartmentUpsertNestedInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentUpdateOneRequiredWithoutTranslationInput {
  create: DepartmentCreateWithoutTranslationInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentUpsertNestedInput {
  update: DepartmentUpdateDataInput!
  create: DepartmentCreateInput!
}

input DepartmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  translation_every: DepartmentTranslationWhereInput
  translation_some: DepartmentTranslationWhereInput
  translation_none: DepartmentTranslationWhereInput
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
}

input DepartmentWhereUniqueInput {
  id: ID
}

type Employee {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  gender: Gender!
  tel: String!
  department: Department!
  position: EmployeePosition!
  translation(where: EmployeeTranslationWhereInput, orderBy: EmployeeTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmployeeTranslation!]
}

type EmployeeConnection {
  pageInfo: PageInfo!
  edges: [EmployeeEdge]!
  aggregate: AggregateEmployee!
}

input EmployeeCreateInput {
  id: ID
  email: String!
  gender: Gender!
  tel: String!
  department: DepartmentCreateOneInput!
  position: EmployeePositionCreateOneInput!
  translation: EmployeeTranslationCreateManyInput
}

type EmployeeEdge {
  node: Employee!
  cursor: String!
}

enum EmployeeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  tel_ASC
  tel_DESC
}

type EmployeePosition {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  translation(where: EmployeePositionTranslationWhereInput, orderBy: EmployeePositionTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmployeePositionTranslation!]
}

type EmployeePositionConnection {
  pageInfo: PageInfo!
  edges: [EmployeePositionEdge]!
  aggregate: AggregateEmployeePosition!
}

input EmployeePositionCreateInput {
  id: ID
  translation: EmployeePositionTranslationCreateManyWithoutPositionInput
}

input EmployeePositionCreateOneInput {
  create: EmployeePositionCreateInput
  connect: EmployeePositionWhereUniqueInput
}

input EmployeePositionCreateOneWithoutTranslationInput {
  create: EmployeePositionCreateWithoutTranslationInput
  connect: EmployeePositionWhereUniqueInput
}

input EmployeePositionCreateWithoutTranslationInput {
  id: ID
}

type EmployeePositionEdge {
  node: EmployeePosition!
  cursor: String!
}

enum EmployeePositionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmployeePositionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EmployeePositionSubscriptionPayload {
  mutation: MutationType!
  node: EmployeePosition
  updatedFields: [String!]
  previousValues: EmployeePositionPreviousValues
}

input EmployeePositionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmployeePositionWhereInput
  AND: [EmployeePositionSubscriptionWhereInput!]
  OR: [EmployeePositionSubscriptionWhereInput!]
  NOT: [EmployeePositionSubscriptionWhereInput!]
}

type EmployeePositionTranslation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  language: Language!
  position: EmployeePosition!
}

type EmployeePositionTranslationConnection {
  pageInfo: PageInfo!
  edges: [EmployeePositionTranslationEdge]!
  aggregate: AggregateEmployeePositionTranslation!
}

input EmployeePositionTranslationCreateInput {
  id: ID
  name: String!
  language: LanguageCreateOneInput!
  position: EmployeePositionCreateOneWithoutTranslationInput!
}

input EmployeePositionTranslationCreateManyWithoutPositionInput {
  create: [EmployeePositionTranslationCreateWithoutPositionInput!]
  connect: [EmployeePositionTranslationWhereUniqueInput!]
}

input EmployeePositionTranslationCreateWithoutPositionInput {
  id: ID
  name: String!
  language: LanguageCreateOneInput!
}

type EmployeePositionTranslationEdge {
  node: EmployeePositionTranslation!
  cursor: String!
}

enum EmployeePositionTranslationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type EmployeePositionTranslationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input EmployeePositionTranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [EmployeePositionTranslationScalarWhereInput!]
  OR: [EmployeePositionTranslationScalarWhereInput!]
  NOT: [EmployeePositionTranslationScalarWhereInput!]
}

type EmployeePositionTranslationSubscriptionPayload {
  mutation: MutationType!
  node: EmployeePositionTranslation
  updatedFields: [String!]
  previousValues: EmployeePositionTranslationPreviousValues
}

input EmployeePositionTranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmployeePositionTranslationWhereInput
  AND: [EmployeePositionTranslationSubscriptionWhereInput!]
  OR: [EmployeePositionTranslationSubscriptionWhereInput!]
  NOT: [EmployeePositionTranslationSubscriptionWhereInput!]
}

input EmployeePositionTranslationUpdateInput {
  name: String
  language: LanguageUpdateOneRequiredInput
  position: EmployeePositionUpdateOneRequiredWithoutTranslationInput
}

input EmployeePositionTranslationUpdateManyDataInput {
  name: String
}

input EmployeePositionTranslationUpdateManyMutationInput {
  name: String
}

input EmployeePositionTranslationUpdateManyWithoutPositionInput {
  create: [EmployeePositionTranslationCreateWithoutPositionInput!]
  delete: [EmployeePositionTranslationWhereUniqueInput!]
  connect: [EmployeePositionTranslationWhereUniqueInput!]
  set: [EmployeePositionTranslationWhereUniqueInput!]
  disconnect: [EmployeePositionTranslationWhereUniqueInput!]
  update: [EmployeePositionTranslationUpdateWithWhereUniqueWithoutPositionInput!]
  upsert: [EmployeePositionTranslationUpsertWithWhereUniqueWithoutPositionInput!]
  deleteMany: [EmployeePositionTranslationScalarWhereInput!]
  updateMany: [EmployeePositionTranslationUpdateManyWithWhereNestedInput!]
}

input EmployeePositionTranslationUpdateManyWithWhereNestedInput {
  where: EmployeePositionTranslationScalarWhereInput!
  data: EmployeePositionTranslationUpdateManyDataInput!
}

input EmployeePositionTranslationUpdateWithoutPositionDataInput {
  name: String
  language: LanguageUpdateOneRequiredInput
}

input EmployeePositionTranslationUpdateWithWhereUniqueWithoutPositionInput {
  where: EmployeePositionTranslationWhereUniqueInput!
  data: EmployeePositionTranslationUpdateWithoutPositionDataInput!
}

input EmployeePositionTranslationUpsertWithWhereUniqueWithoutPositionInput {
  where: EmployeePositionTranslationWhereUniqueInput!
  update: EmployeePositionTranslationUpdateWithoutPositionDataInput!
  create: EmployeePositionTranslationCreateWithoutPositionInput!
}

input EmployeePositionTranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  language: LanguageWhereInput
  position: EmployeePositionWhereInput
  AND: [EmployeePositionTranslationWhereInput!]
  OR: [EmployeePositionTranslationWhereInput!]
  NOT: [EmployeePositionTranslationWhereInput!]
}

input EmployeePositionTranslationWhereUniqueInput {
  id: ID
  name: String
}

input EmployeePositionUpdateDataInput {
  translation: EmployeePositionTranslationUpdateManyWithoutPositionInput
}

input EmployeePositionUpdateInput {
  translation: EmployeePositionTranslationUpdateManyWithoutPositionInput
}

input EmployeePositionUpdateOneRequiredInput {
  create: EmployeePositionCreateInput
  update: EmployeePositionUpdateDataInput
  upsert: EmployeePositionUpsertNestedInput
  connect: EmployeePositionWhereUniqueInput
}

input EmployeePositionUpdateOneRequiredWithoutTranslationInput {
  create: EmployeePositionCreateWithoutTranslationInput
  connect: EmployeePositionWhereUniqueInput
}

input EmployeePositionUpsertNestedInput {
  update: EmployeePositionUpdateDataInput!
  create: EmployeePositionCreateInput!
}

input EmployeePositionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  translation_every: EmployeePositionTranslationWhereInput
  translation_some: EmployeePositionTranslationWhereInput
  translation_none: EmployeePositionTranslationWhereInput
  AND: [EmployeePositionWhereInput!]
  OR: [EmployeePositionWhereInput!]
  NOT: [EmployeePositionWhereInput!]
}

input EmployeePositionWhereUniqueInput {
  id: ID
}

type EmployeePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  gender: Gender!
  tel: String!
}

type EmployeeSubscriptionPayload {
  mutation: MutationType!
  node: Employee
  updatedFields: [String!]
  previousValues: EmployeePreviousValues
}

input EmployeeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmployeeWhereInput
  AND: [EmployeeSubscriptionWhereInput!]
  OR: [EmployeeSubscriptionWhereInput!]
  NOT: [EmployeeSubscriptionWhereInput!]
}

type EmployeeTranslation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  language: Language!
}

type EmployeeTranslationConnection {
  pageInfo: PageInfo!
  edges: [EmployeeTranslationEdge]!
  aggregate: AggregateEmployeeTranslation!
}

input EmployeeTranslationCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  language: LanguageCreateOneInput!
}

input EmployeeTranslationCreateManyInput {
  create: [EmployeeTranslationCreateInput!]
  connect: [EmployeeTranslationWhereUniqueInput!]
}

type EmployeeTranslationEdge {
  node: EmployeeTranslation!
  cursor: String!
}

enum EmployeeTranslationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
}

type EmployeeTranslationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
}

input EmployeeTranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  AND: [EmployeeTranslationScalarWhereInput!]
  OR: [EmployeeTranslationScalarWhereInput!]
  NOT: [EmployeeTranslationScalarWhereInput!]
}

type EmployeeTranslationSubscriptionPayload {
  mutation: MutationType!
  node: EmployeeTranslation
  updatedFields: [String!]
  previousValues: EmployeeTranslationPreviousValues
}

input EmployeeTranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EmployeeTranslationWhereInput
  AND: [EmployeeTranslationSubscriptionWhereInput!]
  OR: [EmployeeTranslationSubscriptionWhereInput!]
  NOT: [EmployeeTranslationSubscriptionWhereInput!]
}

input EmployeeTranslationUpdateDataInput {
  firstName: String
  lastName: String
  language: LanguageUpdateOneRequiredInput
}

input EmployeeTranslationUpdateInput {
  firstName: String
  lastName: String
  language: LanguageUpdateOneRequiredInput
}

input EmployeeTranslationUpdateManyDataInput {
  firstName: String
  lastName: String
}

input EmployeeTranslationUpdateManyInput {
  create: [EmployeeTranslationCreateInput!]
  update: [EmployeeTranslationUpdateWithWhereUniqueNestedInput!]
  upsert: [EmployeeTranslationUpsertWithWhereUniqueNestedInput!]
  delete: [EmployeeTranslationWhereUniqueInput!]
  connect: [EmployeeTranslationWhereUniqueInput!]
  set: [EmployeeTranslationWhereUniqueInput!]
  disconnect: [EmployeeTranslationWhereUniqueInput!]
  deleteMany: [EmployeeTranslationScalarWhereInput!]
  updateMany: [EmployeeTranslationUpdateManyWithWhereNestedInput!]
}

input EmployeeTranslationUpdateManyMutationInput {
  firstName: String
  lastName: String
}

input EmployeeTranslationUpdateManyWithWhereNestedInput {
  where: EmployeeTranslationScalarWhereInput!
  data: EmployeeTranslationUpdateManyDataInput!
}

input EmployeeTranslationUpdateWithWhereUniqueNestedInput {
  where: EmployeeTranslationWhereUniqueInput!
  data: EmployeeTranslationUpdateDataInput!
}

input EmployeeTranslationUpsertWithWhereUniqueNestedInput {
  where: EmployeeTranslationWhereUniqueInput!
  update: EmployeeTranslationUpdateDataInput!
  create: EmployeeTranslationCreateInput!
}

input EmployeeTranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  language: LanguageWhereInput
  AND: [EmployeeTranslationWhereInput!]
  OR: [EmployeeTranslationWhereInput!]
  NOT: [EmployeeTranslationWhereInput!]
}

input EmployeeTranslationWhereUniqueInput {
  id: ID
}

input EmployeeUpdateInput {
  email: String
  gender: Gender
  tel: String
  department: DepartmentUpdateOneRequiredInput
  position: EmployeePositionUpdateOneRequiredInput
  translation: EmployeeTranslationUpdateManyInput
}

input EmployeeUpdateManyMutationInput {
  email: String
  gender: Gender
  tel: String
}

input EmployeeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  tel: String
  tel_not: String
  tel_in: [String!]
  tel_not_in: [String!]
  tel_lt: String
  tel_lte: String
  tel_gt: String
  tel_gte: String
  tel_contains: String
  tel_not_contains: String
  tel_starts_with: String
  tel_not_starts_with: String
  tel_ends_with: String
  tel_not_ends_with: String
  department: DepartmentWhereInput
  position: EmployeePositionWhereInput
  translation_every: EmployeeTranslationWhereInput
  translation_some: EmployeeTranslationWhereInput
  translation_none: EmployeeTranslationWhereInput
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
}

input EmployeeWhereUniqueInput {
  id: ID
}

type Expert {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  workExperience: String
  inpDate: DateTime
  email: String
  web: String
  tel: String
  mobile: String
  publications: String
  translation(where: ExpertTranslationWhereInput, orderBy: ExpertTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExpertTranslation!]
  oecds(where: OecdWhereInput, orderBy: OecdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Oecd!]
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language!]
  author: User!
}

type ExpertConnection {
  pageInfo: PageInfo!
  edges: [ExpertEdge]!
  aggregate: AggregateExpert!
}

input ExpertCreateInput {
  id: ID
  workExperience: String
  inpDate: DateTime
  email: String
  web: String
  tel: String
  mobile: String
  publications: String
  translation: ExpertTranslationCreateManyInput
  oecds: OecdCreateManyInput
  languages: LanguageCreateManyInput
  author: UserCreateOneInput!
}

type ExpertEdge {
  node: Expert!
  cursor: String!
}

enum ExpertOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  workExperience_ASC
  workExperience_DESC
  inpDate_ASC
  inpDate_DESC
  email_ASC
  email_DESC
  web_ASC
  web_DESC
  tel_ASC
  tel_DESC
  mobile_ASC
  mobile_DESC
  publications_ASC
  publications_DESC
}

type ExpertPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  workExperience: String
  inpDate: DateTime
  email: String
  web: String
  tel: String
  mobile: String
  publications: String
}

type ExpertSubscriptionPayload {
  mutation: MutationType!
  node: Expert
  updatedFields: [String!]
  previousValues: ExpertPreviousValues
}

input ExpertSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExpertWhereInput
  AND: [ExpertSubscriptionWhereInput!]
  OR: [ExpertSubscriptionWhereInput!]
  NOT: [ExpertSubscriptionWhereInput!]
}

type ExpertTranslation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  fullName: String
  qualification: String
  academicDegree: String
  specialization: String
  workingPlace: String
  position: String
  language: Language!
}

type ExpertTranslationConnection {
  pageInfo: PageInfo!
  edges: [ExpertTranslationEdge]!
  aggregate: AggregateExpertTranslation!
}

input ExpertTranslationCreateInput {
  id: ID
  fullName: String
  qualification: String
  academicDegree: String
  specialization: String
  workingPlace: String
  position: String
  language: LanguageCreateOneInput!
}

input ExpertTranslationCreateManyInput {
  create: [ExpertTranslationCreateInput!]
  connect: [ExpertTranslationWhereUniqueInput!]
}

type ExpertTranslationEdge {
  node: ExpertTranslation!
  cursor: String!
}

enum ExpertTranslationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  fullName_ASC
  fullName_DESC
  qualification_ASC
  qualification_DESC
  academicDegree_ASC
  academicDegree_DESC
  specialization_ASC
  specialization_DESC
  workingPlace_ASC
  workingPlace_DESC
  position_ASC
  position_DESC
}

type ExpertTranslationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  fullName: String
  qualification: String
  academicDegree: String
  specialization: String
  workingPlace: String
  position: String
}

input ExpertTranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  qualification: String
  qualification_not: String
  qualification_in: [String!]
  qualification_not_in: [String!]
  qualification_lt: String
  qualification_lte: String
  qualification_gt: String
  qualification_gte: String
  qualification_contains: String
  qualification_not_contains: String
  qualification_starts_with: String
  qualification_not_starts_with: String
  qualification_ends_with: String
  qualification_not_ends_with: String
  academicDegree: String
  academicDegree_not: String
  academicDegree_in: [String!]
  academicDegree_not_in: [String!]
  academicDegree_lt: String
  academicDegree_lte: String
  academicDegree_gt: String
  academicDegree_gte: String
  academicDegree_contains: String
  academicDegree_not_contains: String
  academicDegree_starts_with: String
  academicDegree_not_starts_with: String
  academicDegree_ends_with: String
  academicDegree_not_ends_with: String
  specialization: String
  specialization_not: String
  specialization_in: [String!]
  specialization_not_in: [String!]
  specialization_lt: String
  specialization_lte: String
  specialization_gt: String
  specialization_gte: String
  specialization_contains: String
  specialization_not_contains: String
  specialization_starts_with: String
  specialization_not_starts_with: String
  specialization_ends_with: String
  specialization_not_ends_with: String
  workingPlace: String
  workingPlace_not: String
  workingPlace_in: [String!]
  workingPlace_not_in: [String!]
  workingPlace_lt: String
  workingPlace_lte: String
  workingPlace_gt: String
  workingPlace_gte: String
  workingPlace_contains: String
  workingPlace_not_contains: String
  workingPlace_starts_with: String
  workingPlace_not_starts_with: String
  workingPlace_ends_with: String
  workingPlace_not_ends_with: String
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  AND: [ExpertTranslationScalarWhereInput!]
  OR: [ExpertTranslationScalarWhereInput!]
  NOT: [ExpertTranslationScalarWhereInput!]
}

type ExpertTranslationSubscriptionPayload {
  mutation: MutationType!
  node: ExpertTranslation
  updatedFields: [String!]
  previousValues: ExpertTranslationPreviousValues
}

input ExpertTranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExpertTranslationWhereInput
  AND: [ExpertTranslationSubscriptionWhereInput!]
  OR: [ExpertTranslationSubscriptionWhereInput!]
  NOT: [ExpertTranslationSubscriptionWhereInput!]
}

input ExpertTranslationUpdateDataInput {
  fullName: String
  qualification: String
  academicDegree: String
  specialization: String
  workingPlace: String
  position: String
  language: LanguageUpdateOneRequiredInput
}

input ExpertTranslationUpdateInput {
  fullName: String
  qualification: String
  academicDegree: String
  specialization: String
  workingPlace: String
  position: String
  language: LanguageUpdateOneRequiredInput
}

input ExpertTranslationUpdateManyDataInput {
  fullName: String
  qualification: String
  academicDegree: String
  specialization: String
  workingPlace: String
  position: String
}

input ExpertTranslationUpdateManyInput {
  create: [ExpertTranslationCreateInput!]
  update: [ExpertTranslationUpdateWithWhereUniqueNestedInput!]
  upsert: [ExpertTranslationUpsertWithWhereUniqueNestedInput!]
  delete: [ExpertTranslationWhereUniqueInput!]
  connect: [ExpertTranslationWhereUniqueInput!]
  set: [ExpertTranslationWhereUniqueInput!]
  disconnect: [ExpertTranslationWhereUniqueInput!]
  deleteMany: [ExpertTranslationScalarWhereInput!]
  updateMany: [ExpertTranslationUpdateManyWithWhereNestedInput!]
}

input ExpertTranslationUpdateManyMutationInput {
  fullName: String
  qualification: String
  academicDegree: String
  specialization: String
  workingPlace: String
  position: String
}

input ExpertTranslationUpdateManyWithWhereNestedInput {
  where: ExpertTranslationScalarWhereInput!
  data: ExpertTranslationUpdateManyDataInput!
}

input ExpertTranslationUpdateWithWhereUniqueNestedInput {
  where: ExpertTranslationWhereUniqueInput!
  data: ExpertTranslationUpdateDataInput!
}

input ExpertTranslationUpsertWithWhereUniqueNestedInput {
  where: ExpertTranslationWhereUniqueInput!
  update: ExpertTranslationUpdateDataInput!
  create: ExpertTranslationCreateInput!
}

input ExpertTranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  qualification: String
  qualification_not: String
  qualification_in: [String!]
  qualification_not_in: [String!]
  qualification_lt: String
  qualification_lte: String
  qualification_gt: String
  qualification_gte: String
  qualification_contains: String
  qualification_not_contains: String
  qualification_starts_with: String
  qualification_not_starts_with: String
  qualification_ends_with: String
  qualification_not_ends_with: String
  academicDegree: String
  academicDegree_not: String
  academicDegree_in: [String!]
  academicDegree_not_in: [String!]
  academicDegree_lt: String
  academicDegree_lte: String
  academicDegree_gt: String
  academicDegree_gte: String
  academicDegree_contains: String
  academicDegree_not_contains: String
  academicDegree_starts_with: String
  academicDegree_not_starts_with: String
  academicDegree_ends_with: String
  academicDegree_not_ends_with: String
  specialization: String
  specialization_not: String
  specialization_in: [String!]
  specialization_not_in: [String!]
  specialization_lt: String
  specialization_lte: String
  specialization_gt: String
  specialization_gte: String
  specialization_contains: String
  specialization_not_contains: String
  specialization_starts_with: String
  specialization_not_starts_with: String
  specialization_ends_with: String
  specialization_not_ends_with: String
  workingPlace: String
  workingPlace_not: String
  workingPlace_in: [String!]
  workingPlace_not_in: [String!]
  workingPlace_lt: String
  workingPlace_lte: String
  workingPlace_gt: String
  workingPlace_gte: String
  workingPlace_contains: String
  workingPlace_not_contains: String
  workingPlace_starts_with: String
  workingPlace_not_starts_with: String
  workingPlace_ends_with: String
  workingPlace_not_ends_with: String
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  language: LanguageWhereInput
  AND: [ExpertTranslationWhereInput!]
  OR: [ExpertTranslationWhereInput!]
  NOT: [ExpertTranslationWhereInput!]
}

input ExpertTranslationWhereUniqueInput {
  id: ID
}

input ExpertUpdateInput {
  workExperience: String
  inpDate: DateTime
  email: String
  web: String
  tel: String
  mobile: String
  publications: String
  translation: ExpertTranslationUpdateManyInput
  oecds: OecdUpdateManyInput
  languages: LanguageUpdateManyInput
  author: UserUpdateOneRequiredInput
}

input ExpertUpdateManyMutationInput {
  workExperience: String
  inpDate: DateTime
  email: String
  web: String
  tel: String
  mobile: String
  publications: String
}

input ExpertWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  workExperience: String
  workExperience_not: String
  workExperience_in: [String!]
  workExperience_not_in: [String!]
  workExperience_lt: String
  workExperience_lte: String
  workExperience_gt: String
  workExperience_gte: String
  workExperience_contains: String
  workExperience_not_contains: String
  workExperience_starts_with: String
  workExperience_not_starts_with: String
  workExperience_ends_with: String
  workExperience_not_ends_with: String
  inpDate: DateTime
  inpDate_not: DateTime
  inpDate_in: [DateTime!]
  inpDate_not_in: [DateTime!]
  inpDate_lt: DateTime
  inpDate_lte: DateTime
  inpDate_gt: DateTime
  inpDate_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  web: String
  web_not: String
  web_in: [String!]
  web_not_in: [String!]
  web_lt: String
  web_lte: String
  web_gt: String
  web_gte: String
  web_contains: String
  web_not_contains: String
  web_starts_with: String
  web_not_starts_with: String
  web_ends_with: String
  web_not_ends_with: String
  tel: String
  tel_not: String
  tel_in: [String!]
  tel_not_in: [String!]
  tel_lt: String
  tel_lte: String
  tel_gt: String
  tel_gte: String
  tel_contains: String
  tel_not_contains: String
  tel_starts_with: String
  tel_not_starts_with: String
  tel_ends_with: String
  tel_not_ends_with: String
  mobile: String
  mobile_not: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  publications: String
  publications_not: String
  publications_in: [String!]
  publications_not_in: [String!]
  publications_lt: String
  publications_lte: String
  publications_gt: String
  publications_gte: String
  publications_contains: String
  publications_not_contains: String
  publications_starts_with: String
  publications_not_starts_with: String
  publications_ends_with: String
  publications_not_ends_with: String
  translation_every: ExpertTranslationWhereInput
  translation_some: ExpertTranslationWhereInput
  translation_none: ExpertTranslationWhereInput
  oecds_every: OecdWhereInput
  oecds_some: OecdWhereInput
  oecds_none: OecdWhereInput
  languages_every: LanguageWhereInput
  languages_some: LanguageWhereInput
  languages_none: LanguageWhereInput
  author: UserWhereInput
  AND: [ExpertWhereInput!]
  OR: [ExpertWhereInput!]
  NOT: [ExpertWhereInput!]
}

input ExpertWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
}

type Journal {
  id: ID!
  pubNumber: String!
  translation(where: QrjTranslationWhereInput, orderBy: QrjTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QrjTranslation!]
}

type JournalConnection {
  pageInfo: PageInfo!
  edges: [JournalEdge]!
  aggregate: AggregateJournal!
}

input JournalCreateInput {
  id: ID
  pubNumber: String!
  translation: QrjTranslationCreateManyInput
}

input JournalCreateManyInput {
  create: [JournalCreateInput!]
  connect: [JournalWhereUniqueInput!]
}

type JournalEdge {
  node: Journal!
  cursor: String!
}

enum JournalOrderByInput {
  id_ASC
  id_DESC
  pubNumber_ASC
  pubNumber_DESC
}

type JournalPreviousValues {
  id: ID!
  pubNumber: String!
}

input JournalScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  pubNumber: String
  pubNumber_not: String
  pubNumber_in: [String!]
  pubNumber_not_in: [String!]
  pubNumber_lt: String
  pubNumber_lte: String
  pubNumber_gt: String
  pubNumber_gte: String
  pubNumber_contains: String
  pubNumber_not_contains: String
  pubNumber_starts_with: String
  pubNumber_not_starts_with: String
  pubNumber_ends_with: String
  pubNumber_not_ends_with: String
  AND: [JournalScalarWhereInput!]
  OR: [JournalScalarWhereInput!]
  NOT: [JournalScalarWhereInput!]
}

type JournalSubscriptionPayload {
  mutation: MutationType!
  node: Journal
  updatedFields: [String!]
  previousValues: JournalPreviousValues
}

input JournalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JournalWhereInput
  AND: [JournalSubscriptionWhereInput!]
  OR: [JournalSubscriptionWhereInput!]
  NOT: [JournalSubscriptionWhereInput!]
}

input JournalUpdateDataInput {
  pubNumber: String
  translation: QrjTranslationUpdateManyInput
}

input JournalUpdateInput {
  pubNumber: String
  translation: QrjTranslationUpdateManyInput
}

input JournalUpdateManyDataInput {
  pubNumber: String
}

input JournalUpdateManyInput {
  create: [JournalCreateInput!]
  update: [JournalUpdateWithWhereUniqueNestedInput!]
  upsert: [JournalUpsertWithWhereUniqueNestedInput!]
  delete: [JournalWhereUniqueInput!]
  connect: [JournalWhereUniqueInput!]
  set: [JournalWhereUniqueInput!]
  disconnect: [JournalWhereUniqueInput!]
  deleteMany: [JournalScalarWhereInput!]
  updateMany: [JournalUpdateManyWithWhereNestedInput!]
}

input JournalUpdateManyMutationInput {
  pubNumber: String
}

input JournalUpdateManyWithWhereNestedInput {
  where: JournalScalarWhereInput!
  data: JournalUpdateManyDataInput!
}

input JournalUpdateWithWhereUniqueNestedInput {
  where: JournalWhereUniqueInput!
  data: JournalUpdateDataInput!
}

input JournalUpsertWithWhereUniqueNestedInput {
  where: JournalWhereUniqueInput!
  update: JournalUpdateDataInput!
  create: JournalCreateInput!
}

input JournalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  pubNumber: String
  pubNumber_not: String
  pubNumber_in: [String!]
  pubNumber_not_in: [String!]
  pubNumber_lt: String
  pubNumber_lte: String
  pubNumber_gt: String
  pubNumber_gte: String
  pubNumber_contains: String
  pubNumber_not_contains: String
  pubNumber_starts_with: String
  pubNumber_not_starts_with: String
  pubNumber_ends_with: String
  pubNumber_not_ends_with: String
  translation_every: QrjTranslationWhereInput
  translation_some: QrjTranslationWhereInput
  translation_none: QrjTranslationWhereInput
  AND: [JournalWhereInput!]
  OR: [JournalWhereInput!]
  NOT: [JournalWhereInput!]
}

input JournalWhereUniqueInput {
  id: ID
  pubNumber: String
}

type Language {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: LanguageCode!
  name: String!
}

enum LanguageCode {
  KA
  EN
  FR
  ES
  IT
  RU
  DE
}

type LanguageConnection {
  pageInfo: PageInfo!
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  id: ID
  code: LanguageCode!
  name: String!
}

input LanguageCreateManyInput {
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
}

input LanguageCreateOneInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
}

type LanguageEdge {
  node: Language!
  cursor: String!
}

enum LanguageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  code_ASC
  code_DESC
  name_ASC
  name_DESC
}

type LanguagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: LanguageCode!
  name: String!
}

input LanguageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  code: LanguageCode
  code_not: LanguageCode
  code_in: [LanguageCode!]
  code_not_in: [LanguageCode!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [LanguageScalarWhereInput!]
  OR: [LanguageScalarWhereInput!]
  NOT: [LanguageScalarWhereInput!]
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
  AND: [LanguageSubscriptionWhereInput!]
  OR: [LanguageSubscriptionWhereInput!]
  NOT: [LanguageSubscriptionWhereInput!]
}

input LanguageUpdateDataInput {
  code: LanguageCode
  name: String
}

input LanguageUpdateInput {
  code: LanguageCode
  name: String
}

input LanguageUpdateManyDataInput {
  code: LanguageCode
  name: String
}

input LanguageUpdateManyInput {
  create: [LanguageCreateInput!]
  update: [LanguageUpdateWithWhereUniqueNestedInput!]
  upsert: [LanguageUpsertWithWhereUniqueNestedInput!]
  delete: [LanguageWhereUniqueInput!]
  connect: [LanguageWhereUniqueInput!]
  set: [LanguageWhereUniqueInput!]
  disconnect: [LanguageWhereUniqueInput!]
  deleteMany: [LanguageScalarWhereInput!]
  updateMany: [LanguageUpdateManyWithWhereNestedInput!]
}

input LanguageUpdateManyMutationInput {
  code: LanguageCode
  name: String
}

input LanguageUpdateManyWithWhereNestedInput {
  where: LanguageScalarWhereInput!
  data: LanguageUpdateManyDataInput!
}

input LanguageUpdateOneRequiredInput {
  create: LanguageCreateInput
  update: LanguageUpdateDataInput
  upsert: LanguageUpsertNestedInput
  connect: LanguageWhereUniqueInput
}

input LanguageUpdateWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateDataInput!
}

input LanguageUpsertNestedInput {
  update: LanguageUpdateDataInput!
  create: LanguageCreateInput!
}

input LanguageUpsertWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput!
  update: LanguageUpdateDataInput!
  create: LanguageCreateInput!
}

input LanguageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  code: LanguageCode
  code_not: LanguageCode
  code_in: [LanguageCode!]
  code_not_in: [LanguageCode!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
}

input LanguageWhereUniqueInput {
  id: ID
  code: LanguageCode
  name: String
}

scalar Long

type Mutation {
  createDepartment(data: DepartmentCreateInput!): Department!
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  createDepartmentTranslation(data: DepartmentTranslationCreateInput!): DepartmentTranslation!
  updateDepartmentTranslation(data: DepartmentTranslationUpdateInput!, where: DepartmentTranslationWhereUniqueInput!): DepartmentTranslation
  updateManyDepartmentTranslations(data: DepartmentTranslationUpdateManyMutationInput!, where: DepartmentTranslationWhereInput): BatchPayload!
  upsertDepartmentTranslation(where: DepartmentTranslationWhereUniqueInput!, create: DepartmentTranslationCreateInput!, update: DepartmentTranslationUpdateInput!): DepartmentTranslation!
  deleteDepartmentTranslation(where: DepartmentTranslationWhereUniqueInput!): DepartmentTranslation
  deleteManyDepartmentTranslations(where: DepartmentTranslationWhereInput): BatchPayload!
  createEmployee(data: EmployeeCreateInput!): Employee!
  updateEmployee(data: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee
  updateManyEmployees(data: EmployeeUpdateManyMutationInput!, where: EmployeeWhereInput): BatchPayload!
  upsertEmployee(where: EmployeeWhereUniqueInput!, create: EmployeeCreateInput!, update: EmployeeUpdateInput!): Employee!
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteManyEmployees(where: EmployeeWhereInput): BatchPayload!
  createEmployeePosition(data: EmployeePositionCreateInput!): EmployeePosition!
  updateEmployeePosition(data: EmployeePositionUpdateInput!, where: EmployeePositionWhereUniqueInput!): EmployeePosition
  upsertEmployeePosition(where: EmployeePositionWhereUniqueInput!, create: EmployeePositionCreateInput!, update: EmployeePositionUpdateInput!): EmployeePosition!
  deleteEmployeePosition(where: EmployeePositionWhereUniqueInput!): EmployeePosition
  deleteManyEmployeePositions(where: EmployeePositionWhereInput): BatchPayload!
  createEmployeePositionTranslation(data: EmployeePositionTranslationCreateInput!): EmployeePositionTranslation!
  updateEmployeePositionTranslation(data: EmployeePositionTranslationUpdateInput!, where: EmployeePositionTranslationWhereUniqueInput!): EmployeePositionTranslation
  updateManyEmployeePositionTranslations(data: EmployeePositionTranslationUpdateManyMutationInput!, where: EmployeePositionTranslationWhereInput): BatchPayload!
  upsertEmployeePositionTranslation(where: EmployeePositionTranslationWhereUniqueInput!, create: EmployeePositionTranslationCreateInput!, update: EmployeePositionTranslationUpdateInput!): EmployeePositionTranslation!
  deleteEmployeePositionTranslation(where: EmployeePositionTranslationWhereUniqueInput!): EmployeePositionTranslation
  deleteManyEmployeePositionTranslations(where: EmployeePositionTranslationWhereInput): BatchPayload!
  createEmployeeTranslation(data: EmployeeTranslationCreateInput!): EmployeeTranslation!
  updateEmployeeTranslation(data: EmployeeTranslationUpdateInput!, where: EmployeeTranslationWhereUniqueInput!): EmployeeTranslation
  updateManyEmployeeTranslations(data: EmployeeTranslationUpdateManyMutationInput!, where: EmployeeTranslationWhereInput): BatchPayload!
  upsertEmployeeTranslation(where: EmployeeTranslationWhereUniqueInput!, create: EmployeeTranslationCreateInput!, update: EmployeeTranslationUpdateInput!): EmployeeTranslation!
  deleteEmployeeTranslation(where: EmployeeTranslationWhereUniqueInput!): EmployeeTranslation
  deleteManyEmployeeTranslations(where: EmployeeTranslationWhereInput): BatchPayload!
  createExpert(data: ExpertCreateInput!): Expert!
  updateExpert(data: ExpertUpdateInput!, where: ExpertWhereUniqueInput!): Expert
  updateManyExperts(data: ExpertUpdateManyMutationInput!, where: ExpertWhereInput): BatchPayload!
  upsertExpert(where: ExpertWhereUniqueInput!, create: ExpertCreateInput!, update: ExpertUpdateInput!): Expert!
  deleteExpert(where: ExpertWhereUniqueInput!): Expert
  deleteManyExperts(where: ExpertWhereInput): BatchPayload!
  createExpertTranslation(data: ExpertTranslationCreateInput!): ExpertTranslation!
  updateExpertTranslation(data: ExpertTranslationUpdateInput!, where: ExpertTranslationWhereUniqueInput!): ExpertTranslation
  updateManyExpertTranslations(data: ExpertTranslationUpdateManyMutationInput!, where: ExpertTranslationWhereInput): BatchPayload!
  upsertExpertTranslation(where: ExpertTranslationWhereUniqueInput!, create: ExpertTranslationCreateInput!, update: ExpertTranslationUpdateInput!): ExpertTranslation!
  deleteExpertTranslation(where: ExpertTranslationWhereUniqueInput!): ExpertTranslation
  deleteManyExpertTranslations(where: ExpertTranslationWhereInput): BatchPayload!
  createJournal(data: JournalCreateInput!): Journal!
  updateJournal(data: JournalUpdateInput!, where: JournalWhereUniqueInput!): Journal
  updateManyJournals(data: JournalUpdateManyMutationInput!, where: JournalWhereInput): BatchPayload!
  upsertJournal(where: JournalWhereUniqueInput!, create: JournalCreateInput!, update: JournalUpdateInput!): Journal!
  deleteJournal(where: JournalWhereUniqueInput!): Journal
  deleteManyJournals(where: JournalWhereInput): BatchPayload!
  createLanguage(data: LanguageCreateInput!): Language!
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  updateManyLanguages(data: LanguageUpdateManyMutationInput!, where: LanguageWhereInput): BatchPayload!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
  createNews(data: NewsCreateInput!): News!
  updateNews(data: NewsUpdateInput!, where: NewsWhereUniqueInput!): News
  upsertNews(where: NewsWhereUniqueInput!, create: NewsCreateInput!, update: NewsUpdateInput!): News!
  deleteNews(where: NewsWhereUniqueInput!): News
  deleteManyNewses(where: NewsWhereInput): BatchPayload!
  createNewsTranslation(data: NewsTranslationCreateInput!): NewsTranslation!
  updateNewsTranslation(data: NewsTranslationUpdateInput!, where: NewsTranslationWhereUniqueInput!): NewsTranslation
  updateManyNewsTranslations(data: NewsTranslationUpdateManyMutationInput!, where: NewsTranslationWhereInput): BatchPayload!
  upsertNewsTranslation(where: NewsTranslationWhereUniqueInput!, create: NewsTranslationCreateInput!, update: NewsTranslationUpdateInput!): NewsTranslation!
  deleteNewsTranslation(where: NewsTranslationWhereUniqueInput!): NewsTranslation
  deleteManyNewsTranslations(where: NewsTranslationWhereInput): BatchPayload!
  createOecd(data: OecdCreateInput!): Oecd!
  updateOecd(data: OecdUpdateInput!, where: OecdWhereUniqueInput!): Oecd
  updateManyOecds(data: OecdUpdateManyMutationInput!, where: OecdWhereInput): BatchPayload!
  upsertOecd(where: OecdWhereUniqueInput!, create: OecdCreateInput!, update: OecdUpdateInput!): Oecd!
  deleteOecd(where: OecdWhereUniqueInput!): Oecd
  deleteManyOecds(where: OecdWhereInput): BatchPayload!
  createOecdTranslation(data: OecdTranslationCreateInput!): OecdTranslation!
  updateOecdTranslation(data: OecdTranslationUpdateInput!, where: OecdTranslationWhereUniqueInput!): OecdTranslation
  updateManyOecdTranslations(data: OecdTranslationUpdateManyMutationInput!, where: OecdTranslationWhereInput): BatchPayload!
  upsertOecdTranslation(where: OecdTranslationWhereUniqueInput!, create: OecdTranslationCreateInput!, update: OecdTranslationUpdateInput!): OecdTranslation!
  deleteOecdTranslation(where: OecdTranslationWhereUniqueInput!): OecdTranslation
  deleteManyOecdTranslations(where: OecdTranslationWhereInput): BatchPayload!
  createQrj(data: QrjCreateInput!): Qrj!
  updateQrj(data: QrjUpdateInput!, where: QrjWhereUniqueInput!): Qrj
  updateManyQrjs(data: QrjUpdateManyMutationInput!, where: QrjWhereInput): BatchPayload!
  upsertQrj(where: QrjWhereUniqueInput!, create: QrjCreateInput!, update: QrjUpdateInput!): Qrj!
  deleteQrj(where: QrjWhereUniqueInput!): Qrj
  deleteManyQrjs(where: QrjWhereInput): BatchPayload!
  createQrjJournal(data: QrjJournalCreateInput!): QrjJournal!
  updateQrjJournal(data: QrjJournalUpdateInput!, where: QrjJournalWhereUniqueInput!): QrjJournal
  updateManyQrjJournals(data: QrjJournalUpdateManyMutationInput!, where: QrjJournalWhereInput): BatchPayload!
  upsertQrjJournal(where: QrjJournalWhereUniqueInput!, create: QrjJournalCreateInput!, update: QrjJournalUpdateInput!): QrjJournal!
  deleteQrjJournal(where: QrjJournalWhereUniqueInput!): QrjJournal
  deleteManyQrjJournals(where: QrjJournalWhereInput): BatchPayload!
  createQrjJournalTranslation(data: QrjJournalTranslationCreateInput!): QrjJournalTranslation!
  updateQrjJournalTranslation(data: QrjJournalTranslationUpdateInput!, where: QrjJournalTranslationWhereUniqueInput!): QrjJournalTranslation
  updateManyQrjJournalTranslations(data: QrjJournalTranslationUpdateManyMutationInput!, where: QrjJournalTranslationWhereInput): BatchPayload!
  upsertQrjJournalTranslation(where: QrjJournalTranslationWhereUniqueInput!, create: QrjJournalTranslationCreateInput!, update: QrjJournalTranslationUpdateInput!): QrjJournalTranslation!
  deleteQrjJournalTranslation(where: QrjJournalTranslationWhereUniqueInput!): QrjJournalTranslation
  deleteManyQrjJournalTranslations(where: QrjJournalTranslationWhereInput): BatchPayload!
  createQrjPublication(data: QrjPublicationCreateInput!): QrjPublication!
  updateQrjPublication(data: QrjPublicationUpdateInput!, where: QrjPublicationWhereUniqueInput!): QrjPublication
  updateManyQrjPublications(data: QrjPublicationUpdateManyMutationInput!, where: QrjPublicationWhereInput): BatchPayload!
  upsertQrjPublication(where: QrjPublicationWhereUniqueInput!, create: QrjPublicationCreateInput!, update: QrjPublicationUpdateInput!): QrjPublication!
  deleteQrjPublication(where: QrjPublicationWhereUniqueInput!): QrjPublication
  deleteManyQrjPublications(where: QrjPublicationWhereInput): BatchPayload!
  createQrjPublicationTranslation(data: QrjPublicationTranslationCreateInput!): QrjPublicationTranslation!
  updateQrjPublicationTranslation(data: QrjPublicationTranslationUpdateInput!, where: QrjPublicationTranslationWhereUniqueInput!): QrjPublicationTranslation
  updateManyQrjPublicationTranslations(data: QrjPublicationTranslationUpdateManyMutationInput!, where: QrjPublicationTranslationWhereInput): BatchPayload!
  upsertQrjPublicationTranslation(where: QrjPublicationTranslationWhereUniqueInput!, create: QrjPublicationTranslationCreateInput!, update: QrjPublicationTranslationUpdateInput!): QrjPublicationTranslation!
  deleteQrjPublicationTranslation(where: QrjPublicationTranslationWhereUniqueInput!): QrjPublicationTranslation
  deleteManyQrjPublicationTranslations(where: QrjPublicationTranslationWhereInput): BatchPayload!
  createQrjTranslation(data: QrjTranslationCreateInput!): QrjTranslation!
  updateQrjTranslation(data: QrjTranslationUpdateInput!, where: QrjTranslationWhereUniqueInput!): QrjTranslation
  updateManyQrjTranslations(data: QrjTranslationUpdateManyMutationInput!, where: QrjTranslationWhereInput): BatchPayload!
  upsertQrjTranslation(where: QrjTranslationWhereUniqueInput!, create: QrjTranslationCreateInput!, update: QrjTranslationUpdateInput!): QrjTranslation!
  deleteQrjTranslation(where: QrjTranslationWhereUniqueInput!): QrjTranslation
  deleteManyQrjTranslations(where: QrjTranslationWhereInput): BatchPayload!
  createTechnologyTransferAndInnovationOrganization(data: TechnologyTransferAndInnovationOrganizationCreateInput!): TechnologyTransferAndInnovationOrganization!
  updateTechnologyTransferAndInnovationOrganization(data: TechnologyTransferAndInnovationOrganizationUpdateInput!, where: TechnologyTransferAndInnovationOrganizationWhereUniqueInput!): TechnologyTransferAndInnovationOrganization
  updateManyTechnologyTransferAndInnovationOrganizations(data: TechnologyTransferAndInnovationOrganizationUpdateManyMutationInput!, where: TechnologyTransferAndInnovationOrganizationWhereInput): BatchPayload!
  upsertTechnologyTransferAndInnovationOrganization(where: TechnologyTransferAndInnovationOrganizationWhereUniqueInput!, create: TechnologyTransferAndInnovationOrganizationCreateInput!, update: TechnologyTransferAndInnovationOrganizationUpdateInput!): TechnologyTransferAndInnovationOrganization!
  deleteTechnologyTransferAndInnovationOrganization(where: TechnologyTransferAndInnovationOrganizationWhereUniqueInput!): TechnologyTransferAndInnovationOrganization
  deleteManyTechnologyTransferAndInnovationOrganizations(where: TechnologyTransferAndInnovationOrganizationWhereInput): BatchPayload!
  createTechnologyTransferNetwork(data: TechnologyTransferNetworkCreateInput!): TechnologyTransferNetwork!
  updateTechnologyTransferNetwork(data: TechnologyTransferNetworkUpdateInput!, where: TechnologyTransferNetworkWhereUniqueInput!): TechnologyTransferNetwork
  updateManyTechnologyTransferNetworks(data: TechnologyTransferNetworkUpdateManyMutationInput!, where: TechnologyTransferNetworkWhereInput): BatchPayload!
  upsertTechnologyTransferNetwork(where: TechnologyTransferNetworkWhereUniqueInput!, create: TechnologyTransferNetworkCreateInput!, update: TechnologyTransferNetworkUpdateInput!): TechnologyTransferNetwork!
  deleteTechnologyTransferNetwork(where: TechnologyTransferNetworkWhereUniqueInput!): TechnologyTransferNetwork
  deleteManyTechnologyTransferNetworks(where: TechnologyTransferNetworkWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserTranslation(data: UserTranslationCreateInput!): UserTranslation!
  updateUserTranslation(data: UserTranslationUpdateInput!, where: UserTranslationWhereUniqueInput!): UserTranslation
  updateManyUserTranslations(data: UserTranslationUpdateManyMutationInput!, where: UserTranslationWhereInput): BatchPayload!
  upsertUserTranslation(where: UserTranslationWhereUniqueInput!, create: UserTranslationCreateInput!, update: UserTranslationUpdateInput!): UserTranslation!
  deleteUserTranslation(where: UserTranslationWhereUniqueInput!): UserTranslation
  deleteManyUserTranslations(where: UserTranslationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type News {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  translation(where: NewsTranslationWhereInput, orderBy: NewsTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NewsTranslation!]
  author: User!
}

type NewsConnection {
  pageInfo: PageInfo!
  edges: [NewsEdge]!
  aggregate: AggregateNews!
}

input NewsCreateInput {
  id: ID
  translation: NewsTranslationCreateManyInput
  author: UserCreateOneWithoutNewsInput!
}

input NewsCreateManyWithoutAuthorInput {
  create: [NewsCreateWithoutAuthorInput!]
  connect: [NewsWhereUniqueInput!]
}

input NewsCreateWithoutAuthorInput {
  id: ID
  translation: NewsTranslationCreateManyInput
}

type NewsEdge {
  node: News!
  cursor: String!
}

enum NewsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NewsPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NewsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NewsScalarWhereInput!]
  OR: [NewsScalarWhereInput!]
  NOT: [NewsScalarWhereInput!]
}

type NewsSubscriptionPayload {
  mutation: MutationType!
  node: News
  updatedFields: [String!]
  previousValues: NewsPreviousValues
}

input NewsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NewsWhereInput
  AND: [NewsSubscriptionWhereInput!]
  OR: [NewsSubscriptionWhereInput!]
  NOT: [NewsSubscriptionWhereInput!]
}

type NewsTranslation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  content: String
  language: Language!
}

type NewsTranslationConnection {
  pageInfo: PageInfo!
  edges: [NewsTranslationEdge]!
  aggregate: AggregateNewsTranslation!
}

input NewsTranslationCreateInput {
  id: ID
  title: String
  description: String
  content: String
  language: LanguageCreateOneInput!
}

input NewsTranslationCreateManyInput {
  create: [NewsTranslationCreateInput!]
  connect: [NewsTranslationWhereUniqueInput!]
}

type NewsTranslationEdge {
  node: NewsTranslation!
  cursor: String!
}

enum NewsTranslationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  content_ASC
  content_DESC
}

type NewsTranslationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  content: String
}

input NewsTranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [NewsTranslationScalarWhereInput!]
  OR: [NewsTranslationScalarWhereInput!]
  NOT: [NewsTranslationScalarWhereInput!]
}

type NewsTranslationSubscriptionPayload {
  mutation: MutationType!
  node: NewsTranslation
  updatedFields: [String!]
  previousValues: NewsTranslationPreviousValues
}

input NewsTranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NewsTranslationWhereInput
  AND: [NewsTranslationSubscriptionWhereInput!]
  OR: [NewsTranslationSubscriptionWhereInput!]
  NOT: [NewsTranslationSubscriptionWhereInput!]
}

input NewsTranslationUpdateDataInput {
  title: String
  description: String
  content: String
  language: LanguageUpdateOneRequiredInput
}

input NewsTranslationUpdateInput {
  title: String
  description: String
  content: String
  language: LanguageUpdateOneRequiredInput
}

input NewsTranslationUpdateManyDataInput {
  title: String
  description: String
  content: String
}

input NewsTranslationUpdateManyInput {
  create: [NewsTranslationCreateInput!]
  update: [NewsTranslationUpdateWithWhereUniqueNestedInput!]
  upsert: [NewsTranslationUpsertWithWhereUniqueNestedInput!]
  delete: [NewsTranslationWhereUniqueInput!]
  connect: [NewsTranslationWhereUniqueInput!]
  set: [NewsTranslationWhereUniqueInput!]
  disconnect: [NewsTranslationWhereUniqueInput!]
  deleteMany: [NewsTranslationScalarWhereInput!]
  updateMany: [NewsTranslationUpdateManyWithWhereNestedInput!]
}

input NewsTranslationUpdateManyMutationInput {
  title: String
  description: String
  content: String
}

input NewsTranslationUpdateManyWithWhereNestedInput {
  where: NewsTranslationScalarWhereInput!
  data: NewsTranslationUpdateManyDataInput!
}

input NewsTranslationUpdateWithWhereUniqueNestedInput {
  where: NewsTranslationWhereUniqueInput!
  data: NewsTranslationUpdateDataInput!
}

input NewsTranslationUpsertWithWhereUniqueNestedInput {
  where: NewsTranslationWhereUniqueInput!
  update: NewsTranslationUpdateDataInput!
  create: NewsTranslationCreateInput!
}

input NewsTranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  language: LanguageWhereInput
  AND: [NewsTranslationWhereInput!]
  OR: [NewsTranslationWhereInput!]
  NOT: [NewsTranslationWhereInput!]
}

input NewsTranslationWhereUniqueInput {
  id: ID
}

input NewsUpdateInput {
  translation: NewsTranslationUpdateManyInput
  author: UserUpdateOneRequiredWithoutNewsInput
}

input NewsUpdateManyWithoutAuthorInput {
  create: [NewsCreateWithoutAuthorInput!]
  delete: [NewsWhereUniqueInput!]
  connect: [NewsWhereUniqueInput!]
  set: [NewsWhereUniqueInput!]
  disconnect: [NewsWhereUniqueInput!]
  update: [NewsUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [NewsUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [NewsScalarWhereInput!]
}

input NewsUpdateWithoutAuthorDataInput {
  translation: NewsTranslationUpdateManyInput
}

input NewsUpdateWithWhereUniqueWithoutAuthorInput {
  where: NewsWhereUniqueInput!
  data: NewsUpdateWithoutAuthorDataInput!
}

input NewsUpsertWithWhereUniqueWithoutAuthorInput {
  where: NewsWhereUniqueInput!
  update: NewsUpdateWithoutAuthorDataInput!
  create: NewsCreateWithoutAuthorInput!
}

input NewsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  translation_every: NewsTranslationWhereInput
  translation_some: NewsTranslationWhereInput
  translation_none: NewsTranslationWhereInput
  author: UserWhereInput
  AND: [NewsWhereInput!]
  OR: [NewsWhereInput!]
  NOT: [NewsWhereInput!]
}

input NewsWhereUniqueInput {
  id: ID
}

interface Node {
  id: ID!
}

type Oecd {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  translation(where: OecdTranslationWhereInput, orderBy: OecdTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OecdTranslation!]
  author: User!
}

type OecdConnection {
  pageInfo: PageInfo!
  edges: [OecdEdge]!
  aggregate: AggregateOecd!
}

input OecdCreateInput {
  id: ID
  code: String!
  translation: OecdTranslationCreateManyInput
  author: UserCreateOneWithoutOecdsInput!
}

input OecdCreateManyInput {
  create: [OecdCreateInput!]
  connect: [OecdWhereUniqueInput!]
}

input OecdCreateManyWithoutAuthorInput {
  create: [OecdCreateWithoutAuthorInput!]
  connect: [OecdWhereUniqueInput!]
}

input OecdCreateOneInput {
  create: OecdCreateInput
  connect: OecdWhereUniqueInput
}

input OecdCreateWithoutAuthorInput {
  id: ID
  code: String!
  translation: OecdTranslationCreateManyInput
}

type OecdEdge {
  node: Oecd!
  cursor: String!
}

enum OecdOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  code_ASC
  code_DESC
}

type OecdPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
}

input OecdScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  AND: [OecdScalarWhereInput!]
  OR: [OecdScalarWhereInput!]
  NOT: [OecdScalarWhereInput!]
}

type OecdSubscriptionPayload {
  mutation: MutationType!
  node: Oecd
  updatedFields: [String!]
  previousValues: OecdPreviousValues
}

input OecdSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OecdWhereInput
  AND: [OecdSubscriptionWhereInput!]
  OR: [OecdSubscriptionWhereInput!]
  NOT: [OecdSubscriptionWhereInput!]
}

type OecdTranslation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  language: Language!
}

type OecdTranslationConnection {
  pageInfo: PageInfo!
  edges: [OecdTranslationEdge]!
  aggregate: AggregateOecdTranslation!
}

input OecdTranslationCreateInput {
  id: ID
  name: String!
  language: LanguageCreateOneInput!
}

input OecdTranslationCreateManyInput {
  create: [OecdTranslationCreateInput!]
  connect: [OecdTranslationWhereUniqueInput!]
}

type OecdTranslationEdge {
  node: OecdTranslation!
  cursor: String!
}

enum OecdTranslationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type OecdTranslationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input OecdTranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [OecdTranslationScalarWhereInput!]
  OR: [OecdTranslationScalarWhereInput!]
  NOT: [OecdTranslationScalarWhereInput!]
}

type OecdTranslationSubscriptionPayload {
  mutation: MutationType!
  node: OecdTranslation
  updatedFields: [String!]
  previousValues: OecdTranslationPreviousValues
}

input OecdTranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OecdTranslationWhereInput
  AND: [OecdTranslationSubscriptionWhereInput!]
  OR: [OecdTranslationSubscriptionWhereInput!]
  NOT: [OecdTranslationSubscriptionWhereInput!]
}

input OecdTranslationUpdateDataInput {
  name: String
  language: LanguageUpdateOneRequiredInput
}

input OecdTranslationUpdateInput {
  name: String
  language: LanguageUpdateOneRequiredInput
}

input OecdTranslationUpdateManyDataInput {
  name: String
}

input OecdTranslationUpdateManyInput {
  create: [OecdTranslationCreateInput!]
  update: [OecdTranslationUpdateWithWhereUniqueNestedInput!]
  upsert: [OecdTranslationUpsertWithWhereUniqueNestedInput!]
  delete: [OecdTranslationWhereUniqueInput!]
  connect: [OecdTranslationWhereUniqueInput!]
  set: [OecdTranslationWhereUniqueInput!]
  disconnect: [OecdTranslationWhereUniqueInput!]
  deleteMany: [OecdTranslationScalarWhereInput!]
  updateMany: [OecdTranslationUpdateManyWithWhereNestedInput!]
}

input OecdTranslationUpdateManyMutationInput {
  name: String
}

input OecdTranslationUpdateManyWithWhereNestedInput {
  where: OecdTranslationScalarWhereInput!
  data: OecdTranslationUpdateManyDataInput!
}

input OecdTranslationUpdateWithWhereUniqueNestedInput {
  where: OecdTranslationWhereUniqueInput!
  data: OecdTranslationUpdateDataInput!
}

input OecdTranslationUpsertWithWhereUniqueNestedInput {
  where: OecdTranslationWhereUniqueInput!
  update: OecdTranslationUpdateDataInput!
  create: OecdTranslationCreateInput!
}

input OecdTranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  language: LanguageWhereInput
  AND: [OecdTranslationWhereInput!]
  OR: [OecdTranslationWhereInput!]
  NOT: [OecdTranslationWhereInput!]
}

input OecdTranslationWhereUniqueInput {
  id: ID
}

input OecdUpdateDataInput {
  code: String
  translation: OecdTranslationUpdateManyInput
  author: UserUpdateOneRequiredWithoutOecdsInput
}

input OecdUpdateInput {
  code: String
  translation: OecdTranslationUpdateManyInput
  author: UserUpdateOneRequiredWithoutOecdsInput
}

input OecdUpdateManyDataInput {
  code: String
}

input OecdUpdateManyInput {
  create: [OecdCreateInput!]
  update: [OecdUpdateWithWhereUniqueNestedInput!]
  upsert: [OecdUpsertWithWhereUniqueNestedInput!]
  delete: [OecdWhereUniqueInput!]
  connect: [OecdWhereUniqueInput!]
  set: [OecdWhereUniqueInput!]
  disconnect: [OecdWhereUniqueInput!]
  deleteMany: [OecdScalarWhereInput!]
  updateMany: [OecdUpdateManyWithWhereNestedInput!]
}

input OecdUpdateManyMutationInput {
  code: String
}

input OecdUpdateManyWithoutAuthorInput {
  create: [OecdCreateWithoutAuthorInput!]
  delete: [OecdWhereUniqueInput!]
  connect: [OecdWhereUniqueInput!]
  set: [OecdWhereUniqueInput!]
  disconnect: [OecdWhereUniqueInput!]
  update: [OecdUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [OecdUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [OecdScalarWhereInput!]
  updateMany: [OecdUpdateManyWithWhereNestedInput!]
}

input OecdUpdateManyWithWhereNestedInput {
  where: OecdScalarWhereInput!
  data: OecdUpdateManyDataInput!
}

input OecdUpdateOneInput {
  create: OecdCreateInput
  update: OecdUpdateDataInput
  upsert: OecdUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: OecdWhereUniqueInput
}

input OecdUpdateWithoutAuthorDataInput {
  code: String
  translation: OecdTranslationUpdateManyInput
}

input OecdUpdateWithWhereUniqueNestedInput {
  where: OecdWhereUniqueInput!
  data: OecdUpdateDataInput!
}

input OecdUpdateWithWhereUniqueWithoutAuthorInput {
  where: OecdWhereUniqueInput!
  data: OecdUpdateWithoutAuthorDataInput!
}

input OecdUpsertNestedInput {
  update: OecdUpdateDataInput!
  create: OecdCreateInput!
}

input OecdUpsertWithWhereUniqueNestedInput {
  where: OecdWhereUniqueInput!
  update: OecdUpdateDataInput!
  create: OecdCreateInput!
}

input OecdUpsertWithWhereUniqueWithoutAuthorInput {
  where: OecdWhereUniqueInput!
  update: OecdUpdateWithoutAuthorDataInput!
  create: OecdCreateWithoutAuthorInput!
}

input OecdWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  translation_every: OecdTranslationWhereInput
  translation_some: OecdTranslationWhereInput
  translation_none: OecdTranslationWhereInput
  author: UserWhereInput
  AND: [OecdWhereInput!]
  OR: [OecdWhereInput!]
  NOT: [OecdWhereInput!]
}

input OecdWhereUniqueInput {
  id: ID
  code: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Qrj {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  year: String!
  journal(where: JournalWhereInput, orderBy: JournalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Journal!]
  author: User!
}

type QrjConnection {
  pageInfo: PageInfo!
  edges: [QrjEdge]!
  aggregate: AggregateQrj!
}

input QrjCreateInput {
  id: ID
  year: String!
  journal: JournalCreateManyInput
  author: UserCreateOneInput!
}

type QrjEdge {
  node: Qrj!
  cursor: String!
}

type QrjJournal {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  translation(where: QrjJournalTranslationWhereInput, orderBy: QrjJournalTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QrjJournalTranslation!]
  author: User!
}

type QrjJournalConnection {
  pageInfo: PageInfo!
  edges: [QrjJournalEdge]!
  aggregate: AggregateQrjJournal!
}

input QrjJournalCreateInput {
  id: ID
  code: String!
  translation: QrjJournalTranslationCreateManyInput
  author: UserCreateOneInput!
}

input QrjJournalCreateOneInput {
  create: QrjJournalCreateInput
  connect: QrjJournalWhereUniqueInput
}

type QrjJournalEdge {
  node: QrjJournal!
  cursor: String!
}

enum QrjJournalOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  code_ASC
  code_DESC
}

type QrjJournalPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
}

type QrjJournalSubscriptionPayload {
  mutation: MutationType!
  node: QrjJournal
  updatedFields: [String!]
  previousValues: QrjJournalPreviousValues
}

input QrjJournalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QrjJournalWhereInput
  AND: [QrjJournalSubscriptionWhereInput!]
  OR: [QrjJournalSubscriptionWhereInput!]
  NOT: [QrjJournalSubscriptionWhereInput!]
}

type QrjJournalTranslation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  address: String
  language: Language!
}

type QrjJournalTranslationConnection {
  pageInfo: PageInfo!
  edges: [QrjJournalTranslationEdge]!
  aggregate: AggregateQrjJournalTranslation!
}

input QrjJournalTranslationCreateInput {
  id: ID
  name: String
  address: String
  language: LanguageCreateOneInput!
}

input QrjJournalTranslationCreateManyInput {
  create: [QrjJournalTranslationCreateInput!]
  connect: [QrjJournalTranslationWhereUniqueInput!]
}

type QrjJournalTranslationEdge {
  node: QrjJournalTranslation!
  cursor: String!
}

enum QrjJournalTranslationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
}

type QrjJournalTranslationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  address: String
}

input QrjJournalTranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  AND: [QrjJournalTranslationScalarWhereInput!]
  OR: [QrjJournalTranslationScalarWhereInput!]
  NOT: [QrjJournalTranslationScalarWhereInput!]
}

type QrjJournalTranslationSubscriptionPayload {
  mutation: MutationType!
  node: QrjJournalTranslation
  updatedFields: [String!]
  previousValues: QrjJournalTranslationPreviousValues
}

input QrjJournalTranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QrjJournalTranslationWhereInput
  AND: [QrjJournalTranslationSubscriptionWhereInput!]
  OR: [QrjJournalTranslationSubscriptionWhereInput!]
  NOT: [QrjJournalTranslationSubscriptionWhereInput!]
}

input QrjJournalTranslationUpdateDataInput {
  name: String
  address: String
  language: LanguageUpdateOneRequiredInput
}

input QrjJournalTranslationUpdateInput {
  name: String
  address: String
  language: LanguageUpdateOneRequiredInput
}

input QrjJournalTranslationUpdateManyDataInput {
  name: String
  address: String
}

input QrjJournalTranslationUpdateManyInput {
  create: [QrjJournalTranslationCreateInput!]
  update: [QrjJournalTranslationUpdateWithWhereUniqueNestedInput!]
  upsert: [QrjJournalTranslationUpsertWithWhereUniqueNestedInput!]
  delete: [QrjJournalTranslationWhereUniqueInput!]
  connect: [QrjJournalTranslationWhereUniqueInput!]
  set: [QrjJournalTranslationWhereUniqueInput!]
  disconnect: [QrjJournalTranslationWhereUniqueInput!]
  deleteMany: [QrjJournalTranslationScalarWhereInput!]
  updateMany: [QrjJournalTranslationUpdateManyWithWhereNestedInput!]
}

input QrjJournalTranslationUpdateManyMutationInput {
  name: String
  address: String
}

input QrjJournalTranslationUpdateManyWithWhereNestedInput {
  where: QrjJournalTranslationScalarWhereInput!
  data: QrjJournalTranslationUpdateManyDataInput!
}

input QrjJournalTranslationUpdateWithWhereUniqueNestedInput {
  where: QrjJournalTranslationWhereUniqueInput!
  data: QrjJournalTranslationUpdateDataInput!
}

input QrjJournalTranslationUpsertWithWhereUniqueNestedInput {
  where: QrjJournalTranslationWhereUniqueInput!
  update: QrjJournalTranslationUpdateDataInput!
  create: QrjJournalTranslationCreateInput!
}

input QrjJournalTranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  language: LanguageWhereInput
  AND: [QrjJournalTranslationWhereInput!]
  OR: [QrjJournalTranslationWhereInput!]
  NOT: [QrjJournalTranslationWhereInput!]
}

input QrjJournalTranslationWhereUniqueInput {
  id: ID
}

input QrjJournalUpdateDataInput {
  code: String
  translation: QrjJournalTranslationUpdateManyInput
  author: UserUpdateOneRequiredInput
}

input QrjJournalUpdateInput {
  code: String
  translation: QrjJournalTranslationUpdateManyInput
  author: UserUpdateOneRequiredInput
}

input QrjJournalUpdateManyMutationInput {
  code: String
}

input QrjJournalUpdateOneInput {
  create: QrjJournalCreateInput
  update: QrjJournalUpdateDataInput
  upsert: QrjJournalUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: QrjJournalWhereUniqueInput
}

input QrjJournalUpsertNestedInput {
  update: QrjJournalUpdateDataInput!
  create: QrjJournalCreateInput!
}

input QrjJournalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  translation_every: QrjJournalTranslationWhereInput
  translation_some: QrjJournalTranslationWhereInput
  translation_none: QrjJournalTranslationWhereInput
  author: UserWhereInput
  AND: [QrjJournalWhereInput!]
  OR: [QrjJournalWhereInput!]
  NOT: [QrjJournalWhereInput!]
}

input QrjJournalWhereUniqueInput {
  id: ID
  code: String
}

enum QrjOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  year_ASC
  year_DESC
}

type QrjPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  year: String!
}

type QrjPublication {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  index: String!
  edited: Boolean
  year: String
  number: String
  pages: String
  doiUrl: String
  journal: QrjJournal
  inputDate: DateTime
  oecd: Oecd
  translation(where: QrjPublicationTranslationWhereInput, orderBy: QrjPublicationTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QrjPublicationTranslation!]
  author: User!
}

type QrjPublicationConnection {
  pageInfo: PageInfo!
  edges: [QrjPublicationEdge]!
  aggregate: AggregateQrjPublication!
}

input QrjPublicationCreateInput {
  id: ID
  index: String!
  edited: Boolean
  year: String
  number: String
  pages: String
  doiUrl: String
  journal: QrjJournalCreateOneInput
  inputDate: DateTime
  oecd: OecdCreateOneInput
  translation: QrjPublicationTranslationCreateManyInput
  author: UserCreateOneInput!
}

type QrjPublicationEdge {
  node: QrjPublication!
  cursor: String!
}

enum QrjPublicationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  index_ASC
  index_DESC
  edited_ASC
  edited_DESC
  year_ASC
  year_DESC
  number_ASC
  number_DESC
  pages_ASC
  pages_DESC
  doiUrl_ASC
  doiUrl_DESC
  inputDate_ASC
  inputDate_DESC
}

type QrjPublicationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  index: String!
  edited: Boolean
  year: String
  number: String
  pages: String
  doiUrl: String
  inputDate: DateTime
}

type QrjPublicationSubscriptionPayload {
  mutation: MutationType!
  node: QrjPublication
  updatedFields: [String!]
  previousValues: QrjPublicationPreviousValues
}

input QrjPublicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QrjPublicationWhereInput
  AND: [QrjPublicationSubscriptionWhereInput!]
  OR: [QrjPublicationSubscriptionWhereInput!]
  NOT: [QrjPublicationSubscriptionWhereInput!]
}

type QrjPublicationTranslation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  publicationAuthor: String
  publicationLang: String
  abstract: String
  language: Language!
}

type QrjPublicationTranslationConnection {
  pageInfo: PageInfo!
  edges: [QrjPublicationTranslationEdge]!
  aggregate: AggregateQrjPublicationTranslation!
}

input QrjPublicationTranslationCreateInput {
  id: ID
  title: String
  publicationAuthor: String
  publicationLang: String
  abstract: String
  language: LanguageCreateOneInput!
}

input QrjPublicationTranslationCreateManyInput {
  create: [QrjPublicationTranslationCreateInput!]
  connect: [QrjPublicationTranslationWhereUniqueInput!]
}

type QrjPublicationTranslationEdge {
  node: QrjPublicationTranslation!
  cursor: String!
}

enum QrjPublicationTranslationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  publicationAuthor_ASC
  publicationAuthor_DESC
  publicationLang_ASC
  publicationLang_DESC
  abstract_ASC
  abstract_DESC
}

type QrjPublicationTranslationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  publicationAuthor: String
  publicationLang: String
  abstract: String
}

input QrjPublicationTranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  publicationAuthor: String
  publicationAuthor_not: String
  publicationAuthor_in: [String!]
  publicationAuthor_not_in: [String!]
  publicationAuthor_lt: String
  publicationAuthor_lte: String
  publicationAuthor_gt: String
  publicationAuthor_gte: String
  publicationAuthor_contains: String
  publicationAuthor_not_contains: String
  publicationAuthor_starts_with: String
  publicationAuthor_not_starts_with: String
  publicationAuthor_ends_with: String
  publicationAuthor_not_ends_with: String
  publicationLang: String
  publicationLang_not: String
  publicationLang_in: [String!]
  publicationLang_not_in: [String!]
  publicationLang_lt: String
  publicationLang_lte: String
  publicationLang_gt: String
  publicationLang_gte: String
  publicationLang_contains: String
  publicationLang_not_contains: String
  publicationLang_starts_with: String
  publicationLang_not_starts_with: String
  publicationLang_ends_with: String
  publicationLang_not_ends_with: String
  abstract: String
  abstract_not: String
  abstract_in: [String!]
  abstract_not_in: [String!]
  abstract_lt: String
  abstract_lte: String
  abstract_gt: String
  abstract_gte: String
  abstract_contains: String
  abstract_not_contains: String
  abstract_starts_with: String
  abstract_not_starts_with: String
  abstract_ends_with: String
  abstract_not_ends_with: String
  AND: [QrjPublicationTranslationScalarWhereInput!]
  OR: [QrjPublicationTranslationScalarWhereInput!]
  NOT: [QrjPublicationTranslationScalarWhereInput!]
}

type QrjPublicationTranslationSubscriptionPayload {
  mutation: MutationType!
  node: QrjPublicationTranslation
  updatedFields: [String!]
  previousValues: QrjPublicationTranslationPreviousValues
}

input QrjPublicationTranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QrjPublicationTranslationWhereInput
  AND: [QrjPublicationTranslationSubscriptionWhereInput!]
  OR: [QrjPublicationTranslationSubscriptionWhereInput!]
  NOT: [QrjPublicationTranslationSubscriptionWhereInput!]
}

input QrjPublicationTranslationUpdateDataInput {
  title: String
  publicationAuthor: String
  publicationLang: String
  abstract: String
  language: LanguageUpdateOneRequiredInput
}

input QrjPublicationTranslationUpdateInput {
  title: String
  publicationAuthor: String
  publicationLang: String
  abstract: String
  language: LanguageUpdateOneRequiredInput
}

input QrjPublicationTranslationUpdateManyDataInput {
  title: String
  publicationAuthor: String
  publicationLang: String
  abstract: String
}

input QrjPublicationTranslationUpdateManyInput {
  create: [QrjPublicationTranslationCreateInput!]
  update: [QrjPublicationTranslationUpdateWithWhereUniqueNestedInput!]
  upsert: [QrjPublicationTranslationUpsertWithWhereUniqueNestedInput!]
  delete: [QrjPublicationTranslationWhereUniqueInput!]
  connect: [QrjPublicationTranslationWhereUniqueInput!]
  set: [QrjPublicationTranslationWhereUniqueInput!]
  disconnect: [QrjPublicationTranslationWhereUniqueInput!]
  deleteMany: [QrjPublicationTranslationScalarWhereInput!]
  updateMany: [QrjPublicationTranslationUpdateManyWithWhereNestedInput!]
}

input QrjPublicationTranslationUpdateManyMutationInput {
  title: String
  publicationAuthor: String
  publicationLang: String
  abstract: String
}

input QrjPublicationTranslationUpdateManyWithWhereNestedInput {
  where: QrjPublicationTranslationScalarWhereInput!
  data: QrjPublicationTranslationUpdateManyDataInput!
}

input QrjPublicationTranslationUpdateWithWhereUniqueNestedInput {
  where: QrjPublicationTranslationWhereUniqueInput!
  data: QrjPublicationTranslationUpdateDataInput!
}

input QrjPublicationTranslationUpsertWithWhereUniqueNestedInput {
  where: QrjPublicationTranslationWhereUniqueInput!
  update: QrjPublicationTranslationUpdateDataInput!
  create: QrjPublicationTranslationCreateInput!
}

input QrjPublicationTranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  publicationAuthor: String
  publicationAuthor_not: String
  publicationAuthor_in: [String!]
  publicationAuthor_not_in: [String!]
  publicationAuthor_lt: String
  publicationAuthor_lte: String
  publicationAuthor_gt: String
  publicationAuthor_gte: String
  publicationAuthor_contains: String
  publicationAuthor_not_contains: String
  publicationAuthor_starts_with: String
  publicationAuthor_not_starts_with: String
  publicationAuthor_ends_with: String
  publicationAuthor_not_ends_with: String
  publicationLang: String
  publicationLang_not: String
  publicationLang_in: [String!]
  publicationLang_not_in: [String!]
  publicationLang_lt: String
  publicationLang_lte: String
  publicationLang_gt: String
  publicationLang_gte: String
  publicationLang_contains: String
  publicationLang_not_contains: String
  publicationLang_starts_with: String
  publicationLang_not_starts_with: String
  publicationLang_ends_with: String
  publicationLang_not_ends_with: String
  abstract: String
  abstract_not: String
  abstract_in: [String!]
  abstract_not_in: [String!]
  abstract_lt: String
  abstract_lte: String
  abstract_gt: String
  abstract_gte: String
  abstract_contains: String
  abstract_not_contains: String
  abstract_starts_with: String
  abstract_not_starts_with: String
  abstract_ends_with: String
  abstract_not_ends_with: String
  language: LanguageWhereInput
  AND: [QrjPublicationTranslationWhereInput!]
  OR: [QrjPublicationTranslationWhereInput!]
  NOT: [QrjPublicationTranslationWhereInput!]
}

input QrjPublicationTranslationWhereUniqueInput {
  id: ID
}

input QrjPublicationUpdateInput {
  index: String
  edited: Boolean
  year: String
  number: String
  pages: String
  doiUrl: String
  journal: QrjJournalUpdateOneInput
  inputDate: DateTime
  oecd: OecdUpdateOneInput
  translation: QrjPublicationTranslationUpdateManyInput
  author: UserUpdateOneRequiredInput
}

input QrjPublicationUpdateManyMutationInput {
  index: String
  edited: Boolean
  year: String
  number: String
  pages: String
  doiUrl: String
  inputDate: DateTime
}

input QrjPublicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  index: String
  index_not: String
  index_in: [String!]
  index_not_in: [String!]
  index_lt: String
  index_lte: String
  index_gt: String
  index_gte: String
  index_contains: String
  index_not_contains: String
  index_starts_with: String
  index_not_starts_with: String
  index_ends_with: String
  index_not_ends_with: String
  edited: Boolean
  edited_not: Boolean
  year: String
  year_not: String
  year_in: [String!]
  year_not_in: [String!]
  year_lt: String
  year_lte: String
  year_gt: String
  year_gte: String
  year_contains: String
  year_not_contains: String
  year_starts_with: String
  year_not_starts_with: String
  year_ends_with: String
  year_not_ends_with: String
  number: String
  number_not: String
  number_in: [String!]
  number_not_in: [String!]
  number_lt: String
  number_lte: String
  number_gt: String
  number_gte: String
  number_contains: String
  number_not_contains: String
  number_starts_with: String
  number_not_starts_with: String
  number_ends_with: String
  number_not_ends_with: String
  pages: String
  pages_not: String
  pages_in: [String!]
  pages_not_in: [String!]
  pages_lt: String
  pages_lte: String
  pages_gt: String
  pages_gte: String
  pages_contains: String
  pages_not_contains: String
  pages_starts_with: String
  pages_not_starts_with: String
  pages_ends_with: String
  pages_not_ends_with: String
  doiUrl: String
  doiUrl_not: String
  doiUrl_in: [String!]
  doiUrl_not_in: [String!]
  doiUrl_lt: String
  doiUrl_lte: String
  doiUrl_gt: String
  doiUrl_gte: String
  doiUrl_contains: String
  doiUrl_not_contains: String
  doiUrl_starts_with: String
  doiUrl_not_starts_with: String
  doiUrl_ends_with: String
  doiUrl_not_ends_with: String
  journal: QrjJournalWhereInput
  inputDate: DateTime
  inputDate_not: DateTime
  inputDate_in: [DateTime!]
  inputDate_not_in: [DateTime!]
  inputDate_lt: DateTime
  inputDate_lte: DateTime
  inputDate_gt: DateTime
  inputDate_gte: DateTime
  oecd: OecdWhereInput
  translation_every: QrjPublicationTranslationWhereInput
  translation_some: QrjPublicationTranslationWhereInput
  translation_none: QrjPublicationTranslationWhereInput
  author: UserWhereInput
  AND: [QrjPublicationWhereInput!]
  OR: [QrjPublicationWhereInput!]
  NOT: [QrjPublicationWhereInput!]
}

input QrjPublicationWhereUniqueInput {
  id: ID
  index: String
}

type QrjSubscriptionPayload {
  mutation: MutationType!
  node: Qrj
  updatedFields: [String!]
  previousValues: QrjPreviousValues
}

input QrjSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QrjWhereInput
  AND: [QrjSubscriptionWhereInput!]
  OR: [QrjSubscriptionWhereInput!]
  NOT: [QrjSubscriptionWhereInput!]
}

type QrjTranslation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String!
  language: Language!
}

type QrjTranslationConnection {
  pageInfo: PageInfo!
  edges: [QrjTranslationEdge]!
  aggregate: AggregateQrjTranslation!
}

input QrjTranslationCreateInput {
  id: ID
  address: String!
  language: LanguageCreateOneInput!
}

input QrjTranslationCreateManyInput {
  create: [QrjTranslationCreateInput!]
  connect: [QrjTranslationWhereUniqueInput!]
}

type QrjTranslationEdge {
  node: QrjTranslation!
  cursor: String!
}

enum QrjTranslationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  address_ASC
  address_DESC
}

type QrjTranslationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String!
}

input QrjTranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  AND: [QrjTranslationScalarWhereInput!]
  OR: [QrjTranslationScalarWhereInput!]
  NOT: [QrjTranslationScalarWhereInput!]
}

type QrjTranslationSubscriptionPayload {
  mutation: MutationType!
  node: QrjTranslation
  updatedFields: [String!]
  previousValues: QrjTranslationPreviousValues
}

input QrjTranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QrjTranslationWhereInput
  AND: [QrjTranslationSubscriptionWhereInput!]
  OR: [QrjTranslationSubscriptionWhereInput!]
  NOT: [QrjTranslationSubscriptionWhereInput!]
}

input QrjTranslationUpdateDataInput {
  address: String
  language: LanguageUpdateOneRequiredInput
}

input QrjTranslationUpdateInput {
  address: String
  language: LanguageUpdateOneRequiredInput
}

input QrjTranslationUpdateManyDataInput {
  address: String
}

input QrjTranslationUpdateManyInput {
  create: [QrjTranslationCreateInput!]
  update: [QrjTranslationUpdateWithWhereUniqueNestedInput!]
  upsert: [QrjTranslationUpsertWithWhereUniqueNestedInput!]
  delete: [QrjTranslationWhereUniqueInput!]
  connect: [QrjTranslationWhereUniqueInput!]
  set: [QrjTranslationWhereUniqueInput!]
  disconnect: [QrjTranslationWhereUniqueInput!]
  deleteMany: [QrjTranslationScalarWhereInput!]
  updateMany: [QrjTranslationUpdateManyWithWhereNestedInput!]
}

input QrjTranslationUpdateManyMutationInput {
  address: String
}

input QrjTranslationUpdateManyWithWhereNestedInput {
  where: QrjTranslationScalarWhereInput!
  data: QrjTranslationUpdateManyDataInput!
}

input QrjTranslationUpdateWithWhereUniqueNestedInput {
  where: QrjTranslationWhereUniqueInput!
  data: QrjTranslationUpdateDataInput!
}

input QrjTranslationUpsertWithWhereUniqueNestedInput {
  where: QrjTranslationWhereUniqueInput!
  update: QrjTranslationUpdateDataInput!
  create: QrjTranslationCreateInput!
}

input QrjTranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  language: LanguageWhereInput
  AND: [QrjTranslationWhereInput!]
  OR: [QrjTranslationWhereInput!]
  NOT: [QrjTranslationWhereInput!]
}

input QrjTranslationWhereUniqueInput {
  id: ID
}

input QrjUpdateInput {
  year: String
  journal: JournalUpdateManyInput
  author: UserUpdateOneRequiredInput
}

input QrjUpdateManyMutationInput {
  year: String
}

input QrjWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  year: String
  year_not: String
  year_in: [String!]
  year_not_in: [String!]
  year_lt: String
  year_lte: String
  year_gt: String
  year_gte: String
  year_contains: String
  year_not_contains: String
  year_starts_with: String
  year_not_starts_with: String
  year_ends_with: String
  year_not_ends_with: String
  journal_every: JournalWhereInput
  journal_some: JournalWhereInput
  journal_none: JournalWhereInput
  author: UserWhereInput
  AND: [QrjWhereInput!]
  OR: [QrjWhereInput!]
  NOT: [QrjWhereInput!]
}

input QrjWhereUniqueInput {
  id: ID
  year: String
}

type Query {
  department(where: DepartmentWhereUniqueInput!): Department
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  departmentTranslation(where: DepartmentTranslationWhereUniqueInput!): DepartmentTranslation
  departmentTranslations(where: DepartmentTranslationWhereInput, orderBy: DepartmentTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DepartmentTranslation]!
  departmentTranslationsConnection(where: DepartmentTranslationWhereInput, orderBy: DepartmentTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentTranslationConnection!
  employee(where: EmployeeWhereUniqueInput!): Employee
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee]!
  employeesConnection(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeeConnection!
  employeePosition(where: EmployeePositionWhereUniqueInput!): EmployeePosition
  employeePositions(where: EmployeePositionWhereInput, orderBy: EmployeePositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmployeePosition]!
  employeePositionsConnection(where: EmployeePositionWhereInput, orderBy: EmployeePositionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeePositionConnection!
  employeePositionTranslation(where: EmployeePositionTranslationWhereUniqueInput!): EmployeePositionTranslation
  employeePositionTranslations(where: EmployeePositionTranslationWhereInput, orderBy: EmployeePositionTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmployeePositionTranslation]!
  employeePositionTranslationsConnection(where: EmployeePositionTranslationWhereInput, orderBy: EmployeePositionTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeePositionTranslationConnection!
  employeeTranslation(where: EmployeeTranslationWhereUniqueInput!): EmployeeTranslation
  employeeTranslations(where: EmployeeTranslationWhereInput, orderBy: EmployeeTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EmployeeTranslation]!
  employeeTranslationsConnection(where: EmployeeTranslationWhereInput, orderBy: EmployeeTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeeTranslationConnection!
  expert(where: ExpertWhereUniqueInput!): Expert
  experts(where: ExpertWhereInput, orderBy: ExpertOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expert]!
  expertsConnection(where: ExpertWhereInput, orderBy: ExpertOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpertConnection!
  expertTranslation(where: ExpertTranslationWhereUniqueInput!): ExpertTranslation
  expertTranslations(where: ExpertTranslationWhereInput, orderBy: ExpertTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExpertTranslation]!
  expertTranslationsConnection(where: ExpertTranslationWhereInput, orderBy: ExpertTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpertTranslationConnection!
  journal(where: JournalWhereUniqueInput!): Journal
  journals(where: JournalWhereInput, orderBy: JournalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Journal]!
  journalsConnection(where: JournalWhereInput, orderBy: JournalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JournalConnection!
  language(where: LanguageWhereUniqueInput!): Language
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!
  news(where: NewsWhereUniqueInput!): News
  newses(where: NewsWhereInput, orderBy: NewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [News]!
  newsesConnection(where: NewsWhereInput, orderBy: NewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NewsConnection!
  newsTranslation(where: NewsTranslationWhereUniqueInput!): NewsTranslation
  newsTranslations(where: NewsTranslationWhereInput, orderBy: NewsTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NewsTranslation]!
  newsTranslationsConnection(where: NewsTranslationWhereInput, orderBy: NewsTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NewsTranslationConnection!
  oecd(where: OecdWhereUniqueInput!): Oecd
  oecds(where: OecdWhereInput, orderBy: OecdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Oecd]!
  oecdsConnection(where: OecdWhereInput, orderBy: OecdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OecdConnection!
  oecdTranslation(where: OecdTranslationWhereUniqueInput!): OecdTranslation
  oecdTranslations(where: OecdTranslationWhereInput, orderBy: OecdTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OecdTranslation]!
  oecdTranslationsConnection(where: OecdTranslationWhereInput, orderBy: OecdTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OecdTranslationConnection!
  qrj(where: QrjWhereUniqueInput!): Qrj
  qrjs(where: QrjWhereInput, orderBy: QrjOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Qrj]!
  qrjsConnection(where: QrjWhereInput, orderBy: QrjOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QrjConnection!
  qrjJournal(where: QrjJournalWhereUniqueInput!): QrjJournal
  qrjJournals(where: QrjJournalWhereInput, orderBy: QrjJournalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QrjJournal]!
  qrjJournalsConnection(where: QrjJournalWhereInput, orderBy: QrjJournalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QrjJournalConnection!
  qrjJournalTranslation(where: QrjJournalTranslationWhereUniqueInput!): QrjJournalTranslation
  qrjJournalTranslations(where: QrjJournalTranslationWhereInput, orderBy: QrjJournalTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QrjJournalTranslation]!
  qrjJournalTranslationsConnection(where: QrjJournalTranslationWhereInput, orderBy: QrjJournalTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QrjJournalTranslationConnection!
  qrjPublication(where: QrjPublicationWhereUniqueInput!): QrjPublication
  qrjPublications(where: QrjPublicationWhereInput, orderBy: QrjPublicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QrjPublication]!
  qrjPublicationsConnection(where: QrjPublicationWhereInput, orderBy: QrjPublicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QrjPublicationConnection!
  qrjPublicationTranslation(where: QrjPublicationTranslationWhereUniqueInput!): QrjPublicationTranslation
  qrjPublicationTranslations(where: QrjPublicationTranslationWhereInput, orderBy: QrjPublicationTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QrjPublicationTranslation]!
  qrjPublicationTranslationsConnection(where: QrjPublicationTranslationWhereInput, orderBy: QrjPublicationTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QrjPublicationTranslationConnection!
  qrjTranslation(where: QrjTranslationWhereUniqueInput!): QrjTranslation
  qrjTranslations(where: QrjTranslationWhereInput, orderBy: QrjTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QrjTranslation]!
  qrjTranslationsConnection(where: QrjTranslationWhereInput, orderBy: QrjTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QrjTranslationConnection!
  technologyTransferAndInnovationOrganization(where: TechnologyTransferAndInnovationOrganizationWhereUniqueInput!): TechnologyTransferAndInnovationOrganization
  technologyTransferAndInnovationOrganizations(where: TechnologyTransferAndInnovationOrganizationWhereInput, orderBy: TechnologyTransferAndInnovationOrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TechnologyTransferAndInnovationOrganization]!
  technologyTransferAndInnovationOrganizationsConnection(where: TechnologyTransferAndInnovationOrganizationWhereInput, orderBy: TechnologyTransferAndInnovationOrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TechnologyTransferAndInnovationOrganizationConnection!
  technologyTransferNetwork(where: TechnologyTransferNetworkWhereUniqueInput!): TechnologyTransferNetwork
  technologyTransferNetworks(where: TechnologyTransferNetworkWhereInput, orderBy: TechnologyTransferNetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TechnologyTransferNetwork]!
  technologyTransferNetworksConnection(where: TechnologyTransferNetworkWhereInput, orderBy: TechnologyTransferNetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TechnologyTransferNetworkConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userTranslation(where: UserTranslationWhereUniqueInput!): UserTranslation
  userTranslations(where: UserTranslationWhereInput, orderBy: UserTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserTranslation]!
  userTranslationsConnection(where: UserTranslationWhereInput, orderBy: UserTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserTranslationConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  EDITOR
  CUSTOMER
}

type Subscription {
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  departmentTranslation(where: DepartmentTranslationSubscriptionWhereInput): DepartmentTranslationSubscriptionPayload
  employee(where: EmployeeSubscriptionWhereInput): EmployeeSubscriptionPayload
  employeePosition(where: EmployeePositionSubscriptionWhereInput): EmployeePositionSubscriptionPayload
  employeePositionTranslation(where: EmployeePositionTranslationSubscriptionWhereInput): EmployeePositionTranslationSubscriptionPayload
  employeeTranslation(where: EmployeeTranslationSubscriptionWhereInput): EmployeeTranslationSubscriptionPayload
  expert(where: ExpertSubscriptionWhereInput): ExpertSubscriptionPayload
  expertTranslation(where: ExpertTranslationSubscriptionWhereInput): ExpertTranslationSubscriptionPayload
  journal(where: JournalSubscriptionWhereInput): JournalSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
  news(where: NewsSubscriptionWhereInput): NewsSubscriptionPayload
  newsTranslation(where: NewsTranslationSubscriptionWhereInput): NewsTranslationSubscriptionPayload
  oecd(where: OecdSubscriptionWhereInput): OecdSubscriptionPayload
  oecdTranslation(where: OecdTranslationSubscriptionWhereInput): OecdTranslationSubscriptionPayload
  qrj(where: QrjSubscriptionWhereInput): QrjSubscriptionPayload
  qrjJournal(where: QrjJournalSubscriptionWhereInput): QrjJournalSubscriptionPayload
  qrjJournalTranslation(where: QrjJournalTranslationSubscriptionWhereInput): QrjJournalTranslationSubscriptionPayload
  qrjPublication(where: QrjPublicationSubscriptionWhereInput): QrjPublicationSubscriptionPayload
  qrjPublicationTranslation(where: QrjPublicationTranslationSubscriptionWhereInput): QrjPublicationTranslationSubscriptionPayload
  qrjTranslation(where: QrjTranslationSubscriptionWhereInput): QrjTranslationSubscriptionPayload
  technologyTransferAndInnovationOrganization(where: TechnologyTransferAndInnovationOrganizationSubscriptionWhereInput): TechnologyTransferAndInnovationOrganizationSubscriptionPayload
  technologyTransferNetwork(where: TechnologyTransferNetworkSubscriptionWhereInput): TechnologyTransferNetworkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userTranslation(where: UserTranslationSubscriptionWhereInput): UserTranslationSubscriptionPayload
}

type TechnologyTransferAndInnovationOrganization {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String
  title: String
  text: String
  region: String
  author: User!
}

type TechnologyTransferAndInnovationOrganizationConnection {
  pageInfo: PageInfo!
  edges: [TechnologyTransferAndInnovationOrganizationEdge]!
  aggregate: AggregateTechnologyTransferAndInnovationOrganization!
}

input TechnologyTransferAndInnovationOrganizationCreateInput {
  id: ID
  url: String
  title: String
  text: String
  region: String
  author: UserCreateOneInput!
}

type TechnologyTransferAndInnovationOrganizationEdge {
  node: TechnologyTransferAndInnovationOrganization!
  cursor: String!
}

enum TechnologyTransferAndInnovationOrganizationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  region_ASC
  region_DESC
}

type TechnologyTransferAndInnovationOrganizationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String
  title: String
  text: String
  region: String
}

type TechnologyTransferAndInnovationOrganizationSubscriptionPayload {
  mutation: MutationType!
  node: TechnologyTransferAndInnovationOrganization
  updatedFields: [String!]
  previousValues: TechnologyTransferAndInnovationOrganizationPreviousValues
}

input TechnologyTransferAndInnovationOrganizationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TechnologyTransferAndInnovationOrganizationWhereInput
  AND: [TechnologyTransferAndInnovationOrganizationSubscriptionWhereInput!]
  OR: [TechnologyTransferAndInnovationOrganizationSubscriptionWhereInput!]
  NOT: [TechnologyTransferAndInnovationOrganizationSubscriptionWhereInput!]
}

input TechnologyTransferAndInnovationOrganizationUpdateInput {
  url: String
  title: String
  text: String
  region: String
  author: UserUpdateOneRequiredInput
}

input TechnologyTransferAndInnovationOrganizationUpdateManyMutationInput {
  url: String
  title: String
  text: String
  region: String
}

input TechnologyTransferAndInnovationOrganizationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  region: String
  region_not: String
  region_in: [String!]
  region_not_in: [String!]
  region_lt: String
  region_lte: String
  region_gt: String
  region_gte: String
  region_contains: String
  region_not_contains: String
  region_starts_with: String
  region_not_starts_with: String
  region_ends_with: String
  region_not_ends_with: String
  author: UserWhereInput
  AND: [TechnologyTransferAndInnovationOrganizationWhereInput!]
  OR: [TechnologyTransferAndInnovationOrganizationWhereInput!]
  NOT: [TechnologyTransferAndInnovationOrganizationWhereInput!]
}

input TechnologyTransferAndInnovationOrganizationWhereUniqueInput {
  id: ID
}

type TechnologyTransferNetwork {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String
  title: String
  text: String
  region: String
  author: User!
}

type TechnologyTransferNetworkConnection {
  pageInfo: PageInfo!
  edges: [TechnologyTransferNetworkEdge]!
  aggregate: AggregateTechnologyTransferNetwork!
}

input TechnologyTransferNetworkCreateInput {
  id: ID
  url: String
  title: String
  text: String
  region: String
  author: UserCreateOneInput!
}

type TechnologyTransferNetworkEdge {
  node: TechnologyTransferNetwork!
  cursor: String!
}

enum TechnologyTransferNetworkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  region_ASC
  region_DESC
}

type TechnologyTransferNetworkPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String
  title: String
  text: String
  region: String
}

type TechnologyTransferNetworkSubscriptionPayload {
  mutation: MutationType!
  node: TechnologyTransferNetwork
  updatedFields: [String!]
  previousValues: TechnologyTransferNetworkPreviousValues
}

input TechnologyTransferNetworkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TechnologyTransferNetworkWhereInput
  AND: [TechnologyTransferNetworkSubscriptionWhereInput!]
  OR: [TechnologyTransferNetworkSubscriptionWhereInput!]
  NOT: [TechnologyTransferNetworkSubscriptionWhereInput!]
}

input TechnologyTransferNetworkUpdateInput {
  url: String
  title: String
  text: String
  region: String
  author: UserUpdateOneRequiredInput
}

input TechnologyTransferNetworkUpdateManyMutationInput {
  url: String
  title: String
  text: String
  region: String
}

input TechnologyTransferNetworkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  region: String
  region_not: String
  region_in: [String!]
  region_not_in: [String!]
  region_lt: String
  region_lte: String
  region_gt: String
  region_gte: String
  region_contains: String
  region_not_contains: String
  region_starts_with: String
  region_not_starts_with: String
  region_ends_with: String
  region_not_ends_with: String
  author: UserWhereInput
  AND: [TechnologyTransferNetworkWhereInput!]
  OR: [TechnologyTransferNetworkWhereInput!]
  NOT: [TechnologyTransferNetworkWhereInput!]
}

input TechnologyTransferNetworkWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  news(where: NewsWhereInput, orderBy: NewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [News!]
  oecds(where: OecdWhereInput, orderBy: OecdOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Oecd!]
  role: Role!
  translation(where: UserTranslationWhereInput, orderBy: UserTranslationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserTranslation!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  news: NewsCreateManyWithoutAuthorInput
  oecds: OecdCreateManyWithoutAuthorInput
  role: Role
  translation: UserTranslationCreateManyInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNewsInput {
  create: UserCreateWithoutNewsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOecdsInput {
  create: UserCreateWithoutOecdsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNewsInput {
  id: ID
  email: String!
  password: String!
  oecds: OecdCreateManyWithoutAuthorInput
  role: Role
  translation: UserTranslationCreateManyInput
}

input UserCreateWithoutOecdsInput {
  id: ID
  email: String!
  password: String!
  news: NewsCreateManyWithoutAuthorInput
  role: Role
  translation: UserTranslationCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  role: Role!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

type UserTranslation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  language: Language!
}

type UserTranslationConnection {
  pageInfo: PageInfo!
  edges: [UserTranslationEdge]!
  aggregate: AggregateUserTranslation!
}

input UserTranslationCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  language: LanguageCreateOneInput!
}

input UserTranslationCreateManyInput {
  create: [UserTranslationCreateInput!]
  connect: [UserTranslationWhereUniqueInput!]
}

type UserTranslationEdge {
  node: UserTranslation!
  cursor: String!
}

enum UserTranslationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
}

type UserTranslationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
}

input UserTranslationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  AND: [UserTranslationScalarWhereInput!]
  OR: [UserTranslationScalarWhereInput!]
  NOT: [UserTranslationScalarWhereInput!]
}

type UserTranslationSubscriptionPayload {
  mutation: MutationType!
  node: UserTranslation
  updatedFields: [String!]
  previousValues: UserTranslationPreviousValues
}

input UserTranslationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserTranslationWhereInput
  AND: [UserTranslationSubscriptionWhereInput!]
  OR: [UserTranslationSubscriptionWhereInput!]
  NOT: [UserTranslationSubscriptionWhereInput!]
}

input UserTranslationUpdateDataInput {
  firstName: String
  lastName: String
  language: LanguageUpdateOneRequiredInput
}

input UserTranslationUpdateInput {
  firstName: String
  lastName: String
  language: LanguageUpdateOneRequiredInput
}

input UserTranslationUpdateManyDataInput {
  firstName: String
  lastName: String
}

input UserTranslationUpdateManyInput {
  create: [UserTranslationCreateInput!]
  update: [UserTranslationUpdateWithWhereUniqueNestedInput!]
  upsert: [UserTranslationUpsertWithWhereUniqueNestedInput!]
  delete: [UserTranslationWhereUniqueInput!]
  connect: [UserTranslationWhereUniqueInput!]
  set: [UserTranslationWhereUniqueInput!]
  disconnect: [UserTranslationWhereUniqueInput!]
  deleteMany: [UserTranslationScalarWhereInput!]
  updateMany: [UserTranslationUpdateManyWithWhereNestedInput!]
}

input UserTranslationUpdateManyMutationInput {
  firstName: String
  lastName: String
}

input UserTranslationUpdateManyWithWhereNestedInput {
  where: UserTranslationScalarWhereInput!
  data: UserTranslationUpdateManyDataInput!
}

input UserTranslationUpdateWithWhereUniqueNestedInput {
  where: UserTranslationWhereUniqueInput!
  data: UserTranslationUpdateDataInput!
}

input UserTranslationUpsertWithWhereUniqueNestedInput {
  where: UserTranslationWhereUniqueInput!
  update: UserTranslationUpdateDataInput!
  create: UserTranslationCreateInput!
}

input UserTranslationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  language: LanguageWhereInput
  AND: [UserTranslationWhereInput!]
  OR: [UserTranslationWhereInput!]
  NOT: [UserTranslationWhereInput!]
}

input UserTranslationWhereUniqueInput {
  id: ID
}

input UserUpdateDataInput {
  email: String
  password: String
  news: NewsUpdateManyWithoutAuthorInput
  oecds: OecdUpdateManyWithoutAuthorInput
  role: Role
  translation: UserTranslationUpdateManyInput
}

input UserUpdateInput {
  email: String
  password: String
  news: NewsUpdateManyWithoutAuthorInput
  oecds: OecdUpdateManyWithoutAuthorInput
  role: Role
  translation: UserTranslationUpdateManyInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  role: Role
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutNewsInput {
  create: UserCreateWithoutNewsInput
  update: UserUpdateWithoutNewsDataInput
  upsert: UserUpsertWithoutNewsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutOecdsInput {
  create: UserCreateWithoutOecdsInput
  update: UserUpdateWithoutOecdsDataInput
  upsert: UserUpsertWithoutOecdsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutNewsDataInput {
  email: String
  password: String
  oecds: OecdUpdateManyWithoutAuthorInput
  role: Role
  translation: UserTranslationUpdateManyInput
}

input UserUpdateWithoutOecdsDataInput {
  email: String
  password: String
  news: NewsUpdateManyWithoutAuthorInput
  role: Role
  translation: UserTranslationUpdateManyInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutNewsInput {
  update: UserUpdateWithoutNewsDataInput!
  create: UserCreateWithoutNewsInput!
}

input UserUpsertWithoutOecdsInput {
  update: UserUpdateWithoutOecdsDataInput!
  create: UserCreateWithoutOecdsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  news_every: NewsWhereInput
  news_some: NewsWhereInput
  news_none: NewsWhereInput
  oecds_every: OecdWhereInput
  oecds_some: OecdWhereInput
  oecds_none: OecdWhereInput
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  translation_every: UserTranslationWhereInput
  translation_some: UserTranslationWhereInput
  translation_none: UserTranslationWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`