endpoint: ${env:PRISMA_URL}

# Defines your models, each model is mapped to the database as a table.
datamodel: [
  Models/language/Language.prisma,
  Models/user/User.prisma,
  Models/oecd/Oecd.prisma,
  Models/employee/Employee.prisma,
  Models/qrj-journal/QrjJournal.prisma,
  Models/news/News.prisma,
  Models/qrj/Qrj.prisma,
  Models/databases/qrj-publication/QrjPublication.prisma,
  Models/databases/expert/Expert.prisma,
  Models/technology-transfer-centers/technology-transfer-network/TechnologyTransferNetwork.prisma,
  Models/technology-transfer-centers/technology-transfer-and-innovation-organization/TechnologyTransferAndInnovationOrganization.prisma
]


# Specifies the language and directory for the generated Prisma client.
generate:
  - generator: typescript-client
    output: ../api/src/libs/interfaces/prisma/generated/prisma-client

# Seed your service with initial data based on `seed.graphql`.
#seed:
#  import: seed.graphql

# Ensures Prisma client is re-generated after a datamodel change.
#hooks:
#  post-deploy:
#    - prisma generate

# If specified, the `secret` must be used to generate a JWT which is attached
# to the `Authorization` header of HTTP requests made against the Prisma API.
# Info: https://www.prisma.io/docs/reference/prisma-api/concepts-utee3eiquo#authentication
secret: ${env:PRISMA_SECRET}
